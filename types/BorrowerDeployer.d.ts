/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface BorrowerDeployerInterface extends ethers.utils.Interface {
  functions: {
    "collector()": FunctionFragment;
    "collectorFab()": FunctionFragment;
    "currency()": FunctionFragment;
    "deploy()": FunctionFragment;
    "deployCollector()": FunctionFragment;
    "deployFeed()": FunctionFragment;
    "deployPile()": FunctionFragment;
    "deployShelf()": FunctionFragment;
    "deployTitle()": FunctionFragment;
    "discountRate()": FunctionFragment;
    "feed()": FunctionFragment;
    "feedFab()": FunctionFragment;
    "pile()": FunctionFragment;
    "pilefab()": FunctionFragment;
    "root()": FunctionFragment;
    "shelf()": FunctionFragment;
    "shelffab()": FunctionFragment;
    "title()": FunctionFragment;
    "titleName()": FunctionFragment;
    "titleSymbol()": FunctionFragment;
    "titlefab()": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "collector", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "collectorFab",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "currency", values?: undefined): string;
  encodeFunctionData(functionFragment: "deploy", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "deployCollector",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "deployFeed",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "deployPile",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "deployShelf",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "deployTitle",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "discountRate",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "feed", values?: undefined): string;
  encodeFunctionData(functionFragment: "feedFab", values?: undefined): string;
  encodeFunctionData(functionFragment: "pile", values?: undefined): string;
  encodeFunctionData(functionFragment: "pilefab", values?: undefined): string;
  encodeFunctionData(functionFragment: "root", values?: undefined): string;
  encodeFunctionData(functionFragment: "shelf", values?: undefined): string;
  encodeFunctionData(functionFragment: "shelffab", values?: undefined): string;
  encodeFunctionData(functionFragment: "title", values?: undefined): string;
  encodeFunctionData(functionFragment: "titleName", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "titleSymbol",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "titlefab", values?: undefined): string;

  decodeFunctionResult(functionFragment: "collector", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "collectorFab",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "currency", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "deploy", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "deployCollector",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deployFeed", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "deployPile", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "deployShelf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deployTitle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "discountRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "feed", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "feedFab", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pile", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pilefab", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "root", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "shelf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "shelffab", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "title", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "titleName", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "titleSymbol",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "titlefab", data: BytesLike): Result;

  events: {};
}

export class BorrowerDeployer extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: BorrowerDeployerInterface;

  functions: {
    collector(overrides?: CallOverrides): Promise<[string]>;

    collectorFab(overrides?: CallOverrides): Promise<[string]>;

    currency(overrides?: CallOverrides): Promise<[string]>;

    deploy(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    deployCollector(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    deployFeed(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    deployPile(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    deployShelf(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    deployTitle(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    discountRate(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { value: BigNumber }>;

    feed(overrides?: CallOverrides): Promise<[string]>;

    feedFab(overrides?: CallOverrides): Promise<[string]>;

    pile(overrides?: CallOverrides): Promise<[string]>;

    pilefab(overrides?: CallOverrides): Promise<[string]>;

    root(overrides?: CallOverrides): Promise<[string]>;

    shelf(overrides?: CallOverrides): Promise<[string]>;

    shelffab(overrides?: CallOverrides): Promise<[string]>;

    title(overrides?: CallOverrides): Promise<[string]>;

    titleName(overrides?: CallOverrides): Promise<[string]>;

    titleSymbol(overrides?: CallOverrides): Promise<[string]>;

    titlefab(overrides?: CallOverrides): Promise<[string]>;
  };

  collector(overrides?: CallOverrides): Promise<string>;

  collectorFab(overrides?: CallOverrides): Promise<string>;

  currency(overrides?: CallOverrides): Promise<string>;

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  deployCollector(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  deployFeed(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  deployPile(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  deployShelf(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  deployTitle(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  discountRate(overrides?: CallOverrides): Promise<BigNumber>;

  feed(overrides?: CallOverrides): Promise<string>;

  feedFab(overrides?: CallOverrides): Promise<string>;

  pile(overrides?: CallOverrides): Promise<string>;

  pilefab(overrides?: CallOverrides): Promise<string>;

  root(overrides?: CallOverrides): Promise<string>;

  shelf(overrides?: CallOverrides): Promise<string>;

  shelffab(overrides?: CallOverrides): Promise<string>;

  title(overrides?: CallOverrides): Promise<string>;

  titleName(overrides?: CallOverrides): Promise<string>;

  titleSymbol(overrides?: CallOverrides): Promise<string>;

  titlefab(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    collector(overrides?: CallOverrides): Promise<string>;

    collectorFab(overrides?: CallOverrides): Promise<string>;

    currency(overrides?: CallOverrides): Promise<string>;

    deploy(overrides?: CallOverrides): Promise<void>;

    deployCollector(overrides?: CallOverrides): Promise<void>;

    deployFeed(overrides?: CallOverrides): Promise<void>;

    deployPile(overrides?: CallOverrides): Promise<void>;

    deployShelf(overrides?: CallOverrides): Promise<void>;

    deployTitle(overrides?: CallOverrides): Promise<void>;

    discountRate(overrides?: CallOverrides): Promise<BigNumber>;

    feed(overrides?: CallOverrides): Promise<string>;

    feedFab(overrides?: CallOverrides): Promise<string>;

    pile(overrides?: CallOverrides): Promise<string>;

    pilefab(overrides?: CallOverrides): Promise<string>;

    root(overrides?: CallOverrides): Promise<string>;

    shelf(overrides?: CallOverrides): Promise<string>;

    shelffab(overrides?: CallOverrides): Promise<string>;

    title(overrides?: CallOverrides): Promise<string>;

    titleName(overrides?: CallOverrides): Promise<string>;

    titleSymbol(overrides?: CallOverrides): Promise<string>;

    titlefab(overrides?: CallOverrides): Promise<string>;
  };

  filters: {};

  estimateGas: {
    collector(overrides?: CallOverrides): Promise<BigNumber>;

    collectorFab(overrides?: CallOverrides): Promise<BigNumber>;

    currency(overrides?: CallOverrides): Promise<BigNumber>;

    deploy(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    deployCollector(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    deployFeed(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    deployPile(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    deployShelf(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    deployTitle(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    discountRate(overrides?: CallOverrides): Promise<BigNumber>;

    feed(overrides?: CallOverrides): Promise<BigNumber>;

    feedFab(overrides?: CallOverrides): Promise<BigNumber>;

    pile(overrides?: CallOverrides): Promise<BigNumber>;

    pilefab(overrides?: CallOverrides): Promise<BigNumber>;

    root(overrides?: CallOverrides): Promise<BigNumber>;

    shelf(overrides?: CallOverrides): Promise<BigNumber>;

    shelffab(overrides?: CallOverrides): Promise<BigNumber>;

    title(overrides?: CallOverrides): Promise<BigNumber>;

    titleName(overrides?: CallOverrides): Promise<BigNumber>;

    titleSymbol(overrides?: CallOverrides): Promise<BigNumber>;

    titlefab(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    collector(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    collectorFab(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    currency(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    deploy(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    deployCollector(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    deployFeed(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    deployPile(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    deployShelf(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    deployTitle(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    discountRate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    feed(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    feedFab(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pile(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pilefab(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    root(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    shelf(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    shelffab(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    title(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    titleName(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    titleSymbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    titlefab(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
