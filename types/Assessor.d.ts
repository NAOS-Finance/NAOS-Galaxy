/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface AssessorInterface extends ethers.utils.Interface {
  functions: {
    "borrowUpdate(uint256)": FunctionFragment;
    "calcJuniorTokenPrice(uint256,uint256)": FunctionFragment;
    "calcSeniorAssetValue(uint256,uint256)": FunctionFragment;
    "calcSeniorTokenPrice(uint256,uint256)": FunctionFragment;
    "calcTokenPrices()": FunctionFragment;
    "calcUpdateNAV()": FunctionFragment;
    "changeSeniorAsset(uint256,uint256,uint256)": FunctionFragment;
    "chargeInterest(uint256,uint256,uint256)": FunctionFragment;
    "compounding(uint256,uint256,uint256,uint256)": FunctionFragment;
    "deny(address)": FunctionFragment;
    "depend(bytes32,address)": FunctionFragment;
    "dripSeniorDebt()": FunctionFragment;
    "file(bytes32,uint256)": FunctionFragment;
    "juniorTranche()": FunctionFragment;
    "lastUpdateSeniorInterest()": FunctionFragment;
    "maxReserve()": FunctionFragment;
    "maxSeniorRatio()": FunctionFragment;
    "minSeniorRatio()": FunctionFragment;
    "navFeed()": FunctionFragment;
    "rdiv(uint256,uint256)": FunctionFragment;
    "rely(address)": FunctionFragment;
    "repaymentUpdate(uint256)": FunctionFragment;
    "reserve()": FunctionFragment;
    "rmul(uint256,uint256)": FunctionFragment;
    "rpow(uint256,uint256,uint256)": FunctionFragment;
    "safeAdd(uint256,uint256)": FunctionFragment;
    "safeDiv(uint256,uint256)": FunctionFragment;
    "safeMul(uint256,uint256)": FunctionFragment;
    "safeSub(uint256,uint256)": FunctionFragment;
    "seniorBalance()": FunctionFragment;
    "seniorBalance_()": FunctionFragment;
    "seniorDebt()": FunctionFragment;
    "seniorDebt_()": FunctionFragment;
    "seniorInterestRate()": FunctionFragment;
    "seniorRatio()": FunctionFragment;
    "seniorRatioBounds()": FunctionFragment;
    "seniorTranche()": FunctionFragment;
    "toAmount(uint256,uint256)": FunctionFragment;
    "toPie(uint256,uint256)": FunctionFragment;
    "wards(address)": FunctionFragment;
    "withdrawFee(uint256)": FunctionFragment;
    "withdrawFeeRate()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "borrowUpdate",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "calcJuniorTokenPrice",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "calcSeniorAssetValue",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "calcSeniorTokenPrice",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "calcTokenPrices",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "calcUpdateNAV",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "changeSeniorAsset",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "chargeInterest",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "compounding",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "deny", values: [string]): string;
  encodeFunctionData(
    functionFragment: "depend",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "dripSeniorDebt",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "file",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "juniorTranche",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lastUpdateSeniorInterest",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maxReserve",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maxSeniorRatio",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minSeniorRatio",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "navFeed", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "rdiv",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "rely", values: [string]): string;
  encodeFunctionData(
    functionFragment: "repaymentUpdate",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "reserve", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "rmul",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "rpow",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "safeAdd",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "safeDiv",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "safeMul",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "safeSub",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "seniorBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "seniorBalance_",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "seniorDebt",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "seniorDebt_",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "seniorInterestRate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "seniorRatio",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "seniorRatioBounds",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "seniorTranche",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "toAmount",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "toPie",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "wards", values: [string]): string;
  encodeFunctionData(
    functionFragment: "withdrawFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawFeeRate",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "borrowUpdate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calcJuniorTokenPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calcSeniorAssetValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calcSeniorTokenPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calcTokenPrices",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calcUpdateNAV",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeSeniorAsset",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "chargeInterest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "compounding",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deny", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "depend", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "dripSeniorDebt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "file", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "juniorTranche",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastUpdateSeniorInterest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "maxReserve", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "maxSeniorRatio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minSeniorRatio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "navFeed", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "rdiv", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "rely", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "repaymentUpdate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "reserve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "rmul", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "rpow", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "safeAdd", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "safeDiv", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "safeMul", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "safeSub", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "seniorBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "seniorBalance_",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "seniorDebt", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "seniorDebt_",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "seniorInterestRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "seniorRatio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "seniorRatioBounds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "seniorTranche",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "toAmount", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "toPie", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "wards", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawFeeRate",
    data: BytesLike
  ): Result;

  events: {
    "LogNote(bytes4,address,bytes32,bytes32,uint256,bytes)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "LogNote"): EventFragment;
}

export type LogNoteEvent = TypedEvent<
  [string, string, string, string, BigNumber, string] & {
    sig: string;
    guy: string;
    foo: string;
    bar: string;
    wad: BigNumber;
    fax: string;
  }
>;

export class Assessor extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: AssessorInterface;

  functions: {
    borrowUpdate(
      currencyAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "calcJuniorTokenPrice(uint256,uint256)"(
      epochNAV: BigNumberish,
      epochReserve: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "calcJuniorTokenPrice()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    calcSeniorAssetValue(
      _seniorDebt: BigNumberish,
      _seniorBalance: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "calcSeniorTokenPrice(uint256,uint256)"(
      epochNAV: BigNumberish,
      epochReserve: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "calcSeniorTokenPrice()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    "calcTokenPrices()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    "calcTokenPrices(uint256,uint256)"(
      epochNAV: BigNumberish,
      epochReserve: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    calcUpdateNAV(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    changeSeniorAsset(
      seniorRatio_: BigNumberish,
      seniorSupply: BigNumberish,
      seniorRedeem: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    chargeInterest(
      interestBearingAmount: BigNumberish,
      ratePerSecond: BigNumberish,
      lastUpdated: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    compounding(
      chi: BigNumberish,
      ratePerSecond: BigNumberish,
      lastUpdated: BigNumberish,
      pie: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    deny(
      usr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    depend(
      contractName: BytesLike,
      addr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    dripSeniorDebt(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    file(
      name: BytesLike,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    juniorTranche(overrides?: CallOverrides): Promise<[string]>;

    lastUpdateSeniorInterest(overrides?: CallOverrides): Promise<[BigNumber]>;

    maxReserve(overrides?: CallOverrides): Promise<[BigNumber]>;

    maxSeniorRatio(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { value: BigNumber }>;

    minSeniorRatio(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { value: BigNumber }>;

    navFeed(overrides?: CallOverrides): Promise<[string]>;

    rdiv(
      x: BigNumberish,
      y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { z: BigNumber }>;

    rely(
      usr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    repaymentUpdate(
      currencyAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    reserve(overrides?: CallOverrides): Promise<[string]>;

    rmul(
      x: BigNumberish,
      y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { z: BigNumber }>;

    rpow(
      x: BigNumberish,
      n: BigNumberish,
      base: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { z: BigNumber }>;

    safeAdd(
      x: BigNumberish,
      y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { z: BigNumber }>;

    safeDiv(
      x: BigNumberish,
      y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { z: BigNumber }>;

    safeMul(
      x: BigNumberish,
      y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { z: BigNumber }>;

    safeSub(
      x: BigNumberish,
      y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { z: BigNumber }>;

    seniorBalance(overrides?: CallOverrides): Promise<[BigNumber]>;

    seniorBalance_(overrides?: CallOverrides): Promise<[BigNumber]>;

    seniorDebt(overrides?: CallOverrides): Promise<[BigNumber]>;

    seniorDebt_(overrides?: CallOverrides): Promise<[BigNumber]>;

    seniorInterestRate(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { value: BigNumber }>;

    seniorRatio(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { value: BigNumber }>;

    seniorRatioBounds(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        minSeniorRatio_: BigNumber;
        maxSeniorRatio_: BigNumber;
      }
    >;

    seniorTranche(overrides?: CallOverrides): Promise<[string]>;

    toAmount(
      chi: BigNumberish,
      pie: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    toPie(
      chi: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    wards(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    withdrawFee(
      currencyAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawFeeRate(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { value: BigNumber }>;
  };

  borrowUpdate(
    currencyAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "calcJuniorTokenPrice(uint256,uint256)"(
    epochNAV: BigNumberish,
    epochReserve: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "calcJuniorTokenPrice()"(overrides?: CallOverrides): Promise<BigNumber>;

  calcSeniorAssetValue(
    _seniorDebt: BigNumberish,
    _seniorBalance: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "calcSeniorTokenPrice(uint256,uint256)"(
    epochNAV: BigNumberish,
    epochReserve: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "calcSeniorTokenPrice()"(overrides?: CallOverrides): Promise<BigNumber>;

  "calcTokenPrices()"(
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber]>;

  "calcTokenPrices(uint256,uint256)"(
    epochNAV: BigNumberish,
    epochReserve: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber]>;

  calcUpdateNAV(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  changeSeniorAsset(
    seniorRatio_: BigNumberish,
    seniorSupply: BigNumberish,
    seniorRedeem: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  chargeInterest(
    interestBearingAmount: BigNumberish,
    ratePerSecond: BigNumberish,
    lastUpdated: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  compounding(
    chi: BigNumberish,
    ratePerSecond: BigNumberish,
    lastUpdated: BigNumberish,
    pie: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber]>;

  deny(
    usr: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  depend(
    contractName: BytesLike,
    addr: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  dripSeniorDebt(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  file(
    name: BytesLike,
    value: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  juniorTranche(overrides?: CallOverrides): Promise<string>;

  lastUpdateSeniorInterest(overrides?: CallOverrides): Promise<BigNumber>;

  maxReserve(overrides?: CallOverrides): Promise<BigNumber>;

  maxSeniorRatio(overrides?: CallOverrides): Promise<BigNumber>;

  minSeniorRatio(overrides?: CallOverrides): Promise<BigNumber>;

  navFeed(overrides?: CallOverrides): Promise<string>;

  rdiv(
    x: BigNumberish,
    y: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  rely(
    usr: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  repaymentUpdate(
    currencyAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  reserve(overrides?: CallOverrides): Promise<string>;

  rmul(
    x: BigNumberish,
    y: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  rpow(
    x: BigNumberish,
    n: BigNumberish,
    base: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  safeAdd(
    x: BigNumberish,
    y: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  safeDiv(
    x: BigNumberish,
    y: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  safeMul(
    x: BigNumberish,
    y: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  safeSub(
    x: BigNumberish,
    y: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  seniorBalance(overrides?: CallOverrides): Promise<BigNumber>;

  seniorBalance_(overrides?: CallOverrides): Promise<BigNumber>;

  seniorDebt(overrides?: CallOverrides): Promise<BigNumber>;

  seniorDebt_(overrides?: CallOverrides): Promise<BigNumber>;

  seniorInterestRate(overrides?: CallOverrides): Promise<BigNumber>;

  seniorRatio(overrides?: CallOverrides): Promise<BigNumber>;

  seniorRatioBounds(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & {
      minSeniorRatio_: BigNumber;
      maxSeniorRatio_: BigNumber;
    }
  >;

  seniorTranche(overrides?: CallOverrides): Promise<string>;

  toAmount(
    chi: BigNumberish,
    pie: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  toPie(
    chi: BigNumberish,
    amount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  wards(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  withdrawFee(
    currencyAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawFeeRate(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    borrowUpdate(
      currencyAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "calcJuniorTokenPrice(uint256,uint256)"(
      epochNAV: BigNumberish,
      epochReserve: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "calcJuniorTokenPrice()"(overrides?: CallOverrides): Promise<BigNumber>;

    calcSeniorAssetValue(
      _seniorDebt: BigNumberish,
      _seniorBalance: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "calcSeniorTokenPrice(uint256,uint256)"(
      epochNAV: BigNumberish,
      epochReserve: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "calcSeniorTokenPrice()"(overrides?: CallOverrides): Promise<BigNumber>;

    "calcTokenPrices()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    "calcTokenPrices(uint256,uint256)"(
      epochNAV: BigNumberish,
      epochReserve: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    calcUpdateNAV(overrides?: CallOverrides): Promise<BigNumber>;

    changeSeniorAsset(
      seniorRatio_: BigNumberish,
      seniorSupply: BigNumberish,
      seniorRedeem: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    chargeInterest(
      interestBearingAmount: BigNumberish,
      ratePerSecond: BigNumberish,
      lastUpdated: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    compounding(
      chi: BigNumberish,
      ratePerSecond: BigNumberish,
      lastUpdated: BigNumberish,
      pie: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    deny(usr: string, overrides?: CallOverrides): Promise<void>;

    depend(
      contractName: BytesLike,
      addr: string,
      overrides?: CallOverrides
    ): Promise<void>;

    dripSeniorDebt(overrides?: CallOverrides): Promise<BigNumber>;

    file(
      name: BytesLike,
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    juniorTranche(overrides?: CallOverrides): Promise<string>;

    lastUpdateSeniorInterest(overrides?: CallOverrides): Promise<BigNumber>;

    maxReserve(overrides?: CallOverrides): Promise<BigNumber>;

    maxSeniorRatio(overrides?: CallOverrides): Promise<BigNumber>;

    minSeniorRatio(overrides?: CallOverrides): Promise<BigNumber>;

    navFeed(overrides?: CallOverrides): Promise<string>;

    rdiv(
      x: BigNumberish,
      y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rely(usr: string, overrides?: CallOverrides): Promise<void>;

    repaymentUpdate(
      currencyAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    reserve(overrides?: CallOverrides): Promise<string>;

    rmul(
      x: BigNumberish,
      y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rpow(
      x: BigNumberish,
      n: BigNumberish,
      base: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    safeAdd(
      x: BigNumberish,
      y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    safeDiv(
      x: BigNumberish,
      y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    safeMul(
      x: BigNumberish,
      y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    safeSub(
      x: BigNumberish,
      y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    seniorBalance(overrides?: CallOverrides): Promise<BigNumber>;

    seniorBalance_(overrides?: CallOverrides): Promise<BigNumber>;

    seniorDebt(overrides?: CallOverrides): Promise<BigNumber>;

    seniorDebt_(overrides?: CallOverrides): Promise<BigNumber>;

    seniorInterestRate(overrides?: CallOverrides): Promise<BigNumber>;

    seniorRatio(overrides?: CallOverrides): Promise<BigNumber>;

    seniorRatioBounds(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        minSeniorRatio_: BigNumber;
        maxSeniorRatio_: BigNumber;
      }
    >;

    seniorTranche(overrides?: CallOverrides): Promise<string>;

    toAmount(
      chi: BigNumberish,
      pie: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    toPie(
      chi: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    wards(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    withdrawFee(
      currencyAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawFeeRate(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    "LogNote(bytes4,address,bytes32,bytes32,uint256,bytes)"(
      sig?: BytesLike | null,
      guy?: string | null,
      foo?: BytesLike | null,
      bar?: BytesLike | null,
      wad?: null,
      fax?: null
    ): TypedEventFilter<
      [string, string, string, string, BigNumber, string],
      {
        sig: string;
        guy: string;
        foo: string;
        bar: string;
        wad: BigNumber;
        fax: string;
      }
    >;

    LogNote(
      sig?: BytesLike | null,
      guy?: string | null,
      foo?: BytesLike | null,
      bar?: BytesLike | null,
      wad?: null,
      fax?: null
    ): TypedEventFilter<
      [string, string, string, string, BigNumber, string],
      {
        sig: string;
        guy: string;
        foo: string;
        bar: string;
        wad: BigNumber;
        fax: string;
      }
    >;
  };

  estimateGas: {
    borrowUpdate(
      currencyAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "calcJuniorTokenPrice(uint256,uint256)"(
      epochNAV: BigNumberish,
      epochReserve: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "calcJuniorTokenPrice()"(overrides?: CallOverrides): Promise<BigNumber>;

    calcSeniorAssetValue(
      _seniorDebt: BigNumberish,
      _seniorBalance: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "calcSeniorTokenPrice(uint256,uint256)"(
      epochNAV: BigNumberish,
      epochReserve: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "calcSeniorTokenPrice()"(overrides?: CallOverrides): Promise<BigNumber>;

    "calcTokenPrices()"(overrides?: CallOverrides): Promise<BigNumber>;

    "calcTokenPrices(uint256,uint256)"(
      epochNAV: BigNumberish,
      epochReserve: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calcUpdateNAV(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    changeSeniorAsset(
      seniorRatio_: BigNumberish,
      seniorSupply: BigNumberish,
      seniorRedeem: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    chargeInterest(
      interestBearingAmount: BigNumberish,
      ratePerSecond: BigNumberish,
      lastUpdated: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    compounding(
      chi: BigNumberish,
      ratePerSecond: BigNumberish,
      lastUpdated: BigNumberish,
      pie: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    deny(
      usr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    depend(
      contractName: BytesLike,
      addr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    dripSeniorDebt(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    file(
      name: BytesLike,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    juniorTranche(overrides?: CallOverrides): Promise<BigNumber>;

    lastUpdateSeniorInterest(overrides?: CallOverrides): Promise<BigNumber>;

    maxReserve(overrides?: CallOverrides): Promise<BigNumber>;

    maxSeniorRatio(overrides?: CallOverrides): Promise<BigNumber>;

    minSeniorRatio(overrides?: CallOverrides): Promise<BigNumber>;

    navFeed(overrides?: CallOverrides): Promise<BigNumber>;

    rdiv(
      x: BigNumberish,
      y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rely(
      usr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    repaymentUpdate(
      currencyAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    reserve(overrides?: CallOverrides): Promise<BigNumber>;

    rmul(
      x: BigNumberish,
      y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rpow(
      x: BigNumberish,
      n: BigNumberish,
      base: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    safeAdd(
      x: BigNumberish,
      y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    safeDiv(
      x: BigNumberish,
      y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    safeMul(
      x: BigNumberish,
      y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    safeSub(
      x: BigNumberish,
      y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    seniorBalance(overrides?: CallOverrides): Promise<BigNumber>;

    seniorBalance_(overrides?: CallOverrides): Promise<BigNumber>;

    seniorDebt(overrides?: CallOverrides): Promise<BigNumber>;

    seniorDebt_(overrides?: CallOverrides): Promise<BigNumber>;

    seniorInterestRate(overrides?: CallOverrides): Promise<BigNumber>;

    seniorRatio(overrides?: CallOverrides): Promise<BigNumber>;

    seniorRatioBounds(overrides?: CallOverrides): Promise<BigNumber>;

    seniorTranche(overrides?: CallOverrides): Promise<BigNumber>;

    toAmount(
      chi: BigNumberish,
      pie: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    toPie(
      chi: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    wards(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    withdrawFee(
      currencyAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawFeeRate(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    borrowUpdate(
      currencyAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "calcJuniorTokenPrice(uint256,uint256)"(
      epochNAV: BigNumberish,
      epochReserve: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "calcJuniorTokenPrice()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calcSeniorAssetValue(
      _seniorDebt: BigNumberish,
      _seniorBalance: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "calcSeniorTokenPrice(uint256,uint256)"(
      epochNAV: BigNumberish,
      epochReserve: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "calcSeniorTokenPrice()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "calcTokenPrices()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "calcTokenPrices(uint256,uint256)"(
      epochNAV: BigNumberish,
      epochReserve: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calcUpdateNAV(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    changeSeniorAsset(
      seniorRatio_: BigNumberish,
      seniorSupply: BigNumberish,
      seniorRedeem: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    chargeInterest(
      interestBearingAmount: BigNumberish,
      ratePerSecond: BigNumberish,
      lastUpdated: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    compounding(
      chi: BigNumberish,
      ratePerSecond: BigNumberish,
      lastUpdated: BigNumberish,
      pie: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    deny(
      usr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    depend(
      contractName: BytesLike,
      addr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    dripSeniorDebt(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    file(
      name: BytesLike,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    juniorTranche(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lastUpdateSeniorInterest(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    maxReserve(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    maxSeniorRatio(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    minSeniorRatio(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    navFeed(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rdiv(
      x: BigNumberish,
      y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rely(
      usr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    repaymentUpdate(
      currencyAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    reserve(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rmul(
      x: BigNumberish,
      y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rpow(
      x: BigNumberish,
      n: BigNumberish,
      base: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    safeAdd(
      x: BigNumberish,
      y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    safeDiv(
      x: BigNumberish,
      y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    safeMul(
      x: BigNumberish,
      y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    safeSub(
      x: BigNumberish,
      y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    seniorBalance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    seniorBalance_(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    seniorDebt(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    seniorDebt_(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    seniorInterestRate(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    seniorRatio(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    seniorRatioBounds(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    seniorTranche(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    toAmount(
      chi: BigNumberish,
      pie: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    toPie(
      chi: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    wards(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdrawFee(
      currencyAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawFeeRate(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
