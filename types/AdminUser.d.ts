/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface AdminUserInterface extends ethers.utils.Interface {
  functions: {
    "addKeeper(uint256,address,uint256)": FunctionFragment;
    "collect(uint256,address)": FunctionFragment;
    "fileFixedRate(uint256,uint256)": FunctionFragment;
    "makeJuniorTokenMember(address,uint256)": FunctionFragment;
    "makeSeniorTokenMember(address,uint256)": FunctionFragment;
    "priceNFT(bytes32,uint256)": FunctionFragment;
    "priceNFTAndSetRiskGroup(bytes32,uint256,uint256,uint256)": FunctionFragment;
    "setCollectPrice(uint256,uint256)": FunctionFragment;
    "whitelistKeeper(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "addKeeper",
    values: [BigNumberish, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "collect",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "fileFixedRate",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "makeJuniorTokenMember",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "makeSeniorTokenMember",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "priceNFT",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "priceNFTAndSetRiskGroup",
    values: [BytesLike, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setCollectPrice",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "whitelistKeeper",
    values: [string]
  ): string;

  decodeFunctionResult(functionFragment: "addKeeper", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "collect", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "fileFixedRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "makeJuniorTokenMember",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "makeSeniorTokenMember",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "priceNFT", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "priceNFTAndSetRiskGroup",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCollectPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "whitelistKeeper",
    data: BytesLike
  ): Result;

  events: {};
}

export class AdminUser extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: AdminUserInterface;

  functions: {
    addKeeper(
      loan: BigNumberish,
      usr: string,
      price: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    collect(
      loan: BigNumberish,
      usr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    fileFixedRate(
      rateGroup: BigNumberish,
      rate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    makeJuniorTokenMember(
      usr: string,
      validitUntil: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    makeSeniorTokenMember(
      usr: string,
      validitUntil: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    priceNFT(
      lookupId: BytesLike,
      nftPrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    priceNFTAndSetRiskGroup(
      lookupId: BytesLike,
      nftPrice: BigNumberish,
      riskGroup: BigNumberish,
      maturityDate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setCollectPrice(
      loan: BigNumberish,
      price: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    whitelistKeeper(
      usr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  addKeeper(
    loan: BigNumberish,
    usr: string,
    price: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  collect(
    loan: BigNumberish,
    usr: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  fileFixedRate(
    rateGroup: BigNumberish,
    rate: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  makeJuniorTokenMember(
    usr: string,
    validitUntil: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  makeSeniorTokenMember(
    usr: string,
    validitUntil: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  priceNFT(
    lookupId: BytesLike,
    nftPrice: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  priceNFTAndSetRiskGroup(
    lookupId: BytesLike,
    nftPrice: BigNumberish,
    riskGroup: BigNumberish,
    maturityDate: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setCollectPrice(
    loan: BigNumberish,
    price: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  whitelistKeeper(
    usr: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addKeeper(
      loan: BigNumberish,
      usr: string,
      price: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    collect(
      loan: BigNumberish,
      usr: string,
      overrides?: CallOverrides
    ): Promise<void>;

    fileFixedRate(
      rateGroup: BigNumberish,
      rate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    makeJuniorTokenMember(
      usr: string,
      validitUntil: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    makeSeniorTokenMember(
      usr: string,
      validitUntil: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    priceNFT(
      lookupId: BytesLike,
      nftPrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    priceNFTAndSetRiskGroup(
      lookupId: BytesLike,
      nftPrice: BigNumberish,
      riskGroup: BigNumberish,
      maturityDate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setCollectPrice(
      loan: BigNumberish,
      price: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    whitelistKeeper(usr: string, overrides?: CallOverrides): Promise<void>;
  };

  filters: {};

  estimateGas: {
    addKeeper(
      loan: BigNumberish,
      usr: string,
      price: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    collect(
      loan: BigNumberish,
      usr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    fileFixedRate(
      rateGroup: BigNumberish,
      rate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    makeJuniorTokenMember(
      usr: string,
      validitUntil: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    makeSeniorTokenMember(
      usr: string,
      validitUntil: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    priceNFT(
      lookupId: BytesLike,
      nftPrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    priceNFTAndSetRiskGroup(
      lookupId: BytesLike,
      nftPrice: BigNumberish,
      riskGroup: BigNumberish,
      maturityDate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setCollectPrice(
      loan: BigNumberish,
      price: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    whitelistKeeper(
      usr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addKeeper(
      loan: BigNumberish,
      usr: string,
      price: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    collect(
      loan: BigNumberish,
      usr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    fileFixedRate(
      rateGroup: BigNumberish,
      rate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    makeJuniorTokenMember(
      usr: string,
      validitUntil: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    makeSeniorTokenMember(
      usr: string,
      validitUntil: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    priceNFT(
      lookupId: BytesLike,
      nftPrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    priceNFTAndSetRiskGroup(
      lookupId: BytesLike,
      nftPrice: BigNumberish,
      riskGroup: BigNumberish,
      maturityDate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setCollectPrice(
      loan: BigNumberish,
      price: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    whitelistKeeper(
      usr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
