/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface TestSetupInterface extends ethers.utils.Interface {
  functions: {
    "borrowerDeployer()": FunctionFragment;
    "collateralNFT()": FunctionFragment;
    "collateralNFT_()": FunctionFragment;
    "currency()": FunctionFragment;
    "currency_()": FunctionFragment;
    "deployCollateralNFT()": FunctionFragment;
    "deployContracts()": FunctionFragment;
    "deployCurrency()": FunctionFragment;
    "deployLender()": FunctionFragment;
    "deployLenderMockBorrower(address)": FunctionFragment;
    "deployTestRoot()": FunctionFragment;
    "issueNFT(address)": FunctionFragment;
    "lenderDeployer()": FunctionFragment;
    "prepareDeployLender(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "borrowerDeployer",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "collateralNFT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "collateralNFT_",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "currency", values?: undefined): string;
  encodeFunctionData(functionFragment: "currency_", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "deployCollateralNFT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "deployContracts",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "deployCurrency",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "deployLender",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "deployLenderMockBorrower",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "deployTestRoot",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "issueNFT", values: [string]): string;
  encodeFunctionData(
    functionFragment: "lenderDeployer",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "prepareDeployLender",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "borrowerDeployer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "collateralNFT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "collateralNFT_",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "currency", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "currency_", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "deployCollateralNFT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deployContracts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deployCurrency",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deployLender",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deployLenderMockBorrower",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deployTestRoot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "issueNFT", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "lenderDeployer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "prepareDeployLender",
    data: BytesLike
  ): Result;

  events: {};
}

export class TestSetup extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: TestSetupInterface;

  functions: {
    borrowerDeployer(overrides?: CallOverrides): Promise<[string]>;

    collateralNFT(overrides?: CallOverrides): Promise<[string]>;

    collateralNFT_(overrides?: CallOverrides): Promise<[string]>;

    currency(overrides?: CallOverrides): Promise<[string]>;

    currency_(overrides?: CallOverrides): Promise<[string]>;

    deployCollateralNFT(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    deployContracts(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    deployCurrency(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    deployLender(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    deployLenderMockBorrower(
      rootAddr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    deployTestRoot(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    issueNFT(
      usr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    lenderDeployer(overrides?: CallOverrides): Promise<[string]>;

    prepareDeployLender(
      rootAddr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  borrowerDeployer(overrides?: CallOverrides): Promise<string>;

  collateralNFT(overrides?: CallOverrides): Promise<string>;

  collateralNFT_(overrides?: CallOverrides): Promise<string>;

  currency(overrides?: CallOverrides): Promise<string>;

  currency_(overrides?: CallOverrides): Promise<string>;

  deployCollateralNFT(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  deployContracts(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  deployCurrency(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  deployLender(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  deployLenderMockBorrower(
    rootAddr: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  deployTestRoot(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  issueNFT(
    usr: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  lenderDeployer(overrides?: CallOverrides): Promise<string>;

  prepareDeployLender(
    rootAddr: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    borrowerDeployer(overrides?: CallOverrides): Promise<string>;

    collateralNFT(overrides?: CallOverrides): Promise<string>;

    collateralNFT_(overrides?: CallOverrides): Promise<string>;

    currency(overrides?: CallOverrides): Promise<string>;

    currency_(overrides?: CallOverrides): Promise<string>;

    deployCollateralNFT(overrides?: CallOverrides): Promise<void>;

    deployContracts(overrides?: CallOverrides): Promise<void>;

    deployCurrency(overrides?: CallOverrides): Promise<void>;

    deployLender(overrides?: CallOverrides): Promise<void>;

    deployLenderMockBorrower(
      rootAddr: string,
      overrides?: CallOverrides
    ): Promise<void>;

    deployTestRoot(overrides?: CallOverrides): Promise<void>;

    issueNFT(
      usr: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber, string] & { tokenId: BigNumber; lookupId: string }>;

    lenderDeployer(overrides?: CallOverrides): Promise<string>;

    prepareDeployLender(
      rootAddr: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    borrowerDeployer(overrides?: CallOverrides): Promise<BigNumber>;

    collateralNFT(overrides?: CallOverrides): Promise<BigNumber>;

    collateralNFT_(overrides?: CallOverrides): Promise<BigNumber>;

    currency(overrides?: CallOverrides): Promise<BigNumber>;

    currency_(overrides?: CallOverrides): Promise<BigNumber>;

    deployCollateralNFT(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    deployContracts(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    deployCurrency(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    deployLender(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    deployLenderMockBorrower(
      rootAddr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    deployTestRoot(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    issueNFT(
      usr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    lenderDeployer(overrides?: CallOverrides): Promise<BigNumber>;

    prepareDeployLender(
      rootAddr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    borrowerDeployer(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    collateralNFT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    collateralNFT_(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    currency(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    currency_(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    deployCollateralNFT(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    deployContracts(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    deployCurrency(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    deployLender(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    deployLenderMockBorrower(
      rootAddr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    deployTestRoot(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    issueNFT(
      usr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    lenderDeployer(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    prepareDeployLender(
      rootAddr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
