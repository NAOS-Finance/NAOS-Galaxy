/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { TitleOwned, TitleOwnedInterface } from "../TitleOwned";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "title_",
        type: "address",
      },
    ],
    payable: false,
    stateMutability: "nonpayable",
    type: "constructor",
  },
];

const _bytecode =
  "0x6080604052348015600f57600080fd5b50604051609d380380609d83398181016040526020811015602f57600080fd5b5051600080546001600160a01b039092166001600160a01b0319909216919091179055603e80605f6000396000f3fe6080604052600080fdfea265627a7a723158200bfcd1916017b68eb41380bd3e17c579a72eb299655224021d25300718db68c064736f6c634300050f0032";

export class TitleOwned__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(
    title_: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<TitleOwned> {
    return super.deploy(title_, overrides || {}) as Promise<TitleOwned>;
  }
  getDeployTransaction(
    title_: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(title_, overrides || {});
  }
  attach(address: string): TitleOwned {
    return super.attach(address) as TitleOwned;
  }
  connect(signer: Signer): TitleOwned__factory {
    return super.connect(signer) as TitleOwned__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TitleOwnedInterface {
    return new utils.Interface(_abi) as TitleOwnedInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TitleOwned {
    return new Contract(address, _abi, signerOrProvider) as TitleOwned;
  }
}
