/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  EpochTickerMock,
  EpochTickerMockInterface,
} from "../EpochTickerMock";

const _abi = [
  {
    constant: true,
    inputs: [],
    name: "currentEpoch",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    payable: false,
    stateMutability: "view",
    type: "function",
  },
  {
    constant: false,
    inputs: [
      {
        internalType: "uint256",
        name: "_epoch",
        type: "uint256",
      },
    ],
    name: "incCurrentEpoch",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    payable: false,
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    constant: false,
    inputs: [
      {
        internalType: "uint256",
        name: "_epoch",
        type: "uint256",
      },
    ],
    name: "incLastEpochExecuted",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    payable: false,
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    constant: true,
    inputs: [],
    name: "lastEpochExecuted",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    payable: false,
    stateMutability: "view",
    type: "function",
  },
  {
    constant: true,
    inputs: [
      {
        internalType: "uint256",
        name: "x",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "y",
        type: "uint256",
      },
    ],
    name: "rdiv",
    outputs: [
      {
        internalType: "uint256",
        name: "z",
        type: "uint256",
      },
    ],
    payable: false,
    stateMutability: "pure",
    type: "function",
  },
  {
    constant: true,
    inputs: [
      {
        internalType: "uint256",
        name: "x",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "y",
        type: "uint256",
      },
    ],
    name: "rmul",
    outputs: [
      {
        internalType: "uint256",
        name: "z",
        type: "uint256",
      },
    ],
    payable: false,
    stateMutability: "pure",
    type: "function",
  },
  {
    constant: true,
    inputs: [
      {
        internalType: "uint256",
        name: "x",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "y",
        type: "uint256",
      },
    ],
    name: "safeAdd",
    outputs: [
      {
        internalType: "uint256",
        name: "z",
        type: "uint256",
      },
    ],
    payable: false,
    stateMutability: "pure",
    type: "function",
  },
  {
    constant: true,
    inputs: [
      {
        internalType: "uint256",
        name: "x",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "y",
        type: "uint256",
      },
    ],
    name: "safeDiv",
    outputs: [
      {
        internalType: "uint256",
        name: "z",
        type: "uint256",
      },
    ],
    payable: false,
    stateMutability: "pure",
    type: "function",
  },
  {
    constant: true,
    inputs: [
      {
        internalType: "uint256",
        name: "x",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "y",
        type: "uint256",
      },
    ],
    name: "safeMul",
    outputs: [
      {
        internalType: "uint256",
        name: "z",
        type: "uint256",
      },
    ],
    payable: false,
    stateMutability: "pure",
    type: "function",
  },
  {
    constant: true,
    inputs: [
      {
        internalType: "uint256",
        name: "x",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "y",
        type: "uint256",
      },
    ],
    name: "safeSub",
    outputs: [
      {
        internalType: "uint256",
        name: "z",
        type: "uint256",
      },
    ],
    payable: false,
    stateMutability: "pure",
    type: "function",
  },
];

const _bytecode =
  "0x60806040526001600055600060015534801561001a57600080fd5b506103d58061002a6000396000f3fe608060405234801561001057600080fd5b506004361061009e5760003560e01c8063b5931f7c11610066578063b5931f7c1461012e578063d05c78da14610151578063dabeba5014610174578063db9f163114610191578063e6cb9013146101ae5761009e565b80630e2286d3146100a357806364c1cf33146100d857806367457022146100e05780637667180814610103578063a293d1e81461010b575b600080fd5b6100c6600480360360408110156100b957600080fd5b50803590602001356101d1565b60408051918252519081900360200190f35b6100c661024c565b6100c6600480360360408110156100f657600080fd5b5080359060200135610252565b6100c661026b565b6100c66004803603604081101561012157600080fd5b5080359060200135610271565b6100c66004803603604081101561014457600080fd5b50803590602001356102c1565b6100c66004803603604081101561016757600080fd5b50803590602001356102cc565b6100c66004803603602081101561018a57600080fd5b503561032a565b6100c6600480360360208110156101a757600080fd5b5035610340565b6100c6600480360360408110156101c457600080fd5b5080359060200135610356565b600080821161021a576040805162461bcd60e51b815260206004820152601060248201526f6469766973696f6e206279207a65726f60801b604482015290519081900360640190fd5b8161023d610234856b033b2e3c9fd0803ce80000006102cc565b60028504610356565b8161024457fe5b049392505050565b60015481565b60006b033b2e3c9fd0803ce800000061023d84846102cc565b60005481565b808203828111156102bb576040805162461bcd60e51b815260206004820152600f60248201526e1cd859994b5cdd588b59985a5b1959608a1b604482015290519081900360640190fd5b92915050565b600081838161024457fe5b60008115806102e7575050808202828282816102e457fe5b04145b6102bb576040805162461bcd60e51b815260206004820152600f60248201526e1cd859994b5b5d5b0b59985a5b1959608a1b604482015290519081900360640190fd5b600061033860015483610356565b600155919050565b600061034e60005483610356565b600055919050565b808201828110156102bb576040805162461bcd60e51b815260206004820152600f60248201526e1cd859994b5859190b59985a5b1959608a1b604482015290519081900360640190fdfea265627a7a72315820856529d760ddd5e2e887e858ae499591e2feec76bb594ed5502c2eaf9892906d64736f6c634300050f0032";

export class EpochTickerMock__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<EpochTickerMock> {
    return super.deploy(overrides || {}) as Promise<EpochTickerMock>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): EpochTickerMock {
    return super.attach(address) as EpochTickerMock;
  }
  connect(signer: Signer): EpochTickerMock__factory {
    return super.connect(signer) as EpochTickerMock__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): EpochTickerMockInterface {
    return new utils.Interface(_abi) as EpochTickerMockInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): EpochTickerMock {
    return new Contract(address, _abi, signerOrProvider) as EpochTickerMock;
  }
}
