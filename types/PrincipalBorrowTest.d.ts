/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface PrincipalBorrowTestInterface extends ethers.utils.Interface {
  functions: {
    "IS_TEST()": FunctionFragment;
    "addKeeperAndCollect(uint256,address,uint256)": FunctionFragment;
    "admin()": FunctionFragment;
    "assertEq(uint256,uint256,uint256)": FunctionFragment;
    "assertPostCondition(uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256)": FunctionFragment;
    "assertPreCondition(uint256,uint256,uint256)": FunctionFragment;
    "baseSetup()": FunctionFragment;
    "borrow(uint256,uint256,uint256,uint256)": FunctionFragment;
    "borrowRepay(uint256,uint256)": FunctionFragment;
    "borrowerDeployer()": FunctionFragment;
    "checkAfterBorrow(uint256,uint256)": FunctionFragment;
    "checkAfterRepay(uint256,uint256,uint256,uint256)": FunctionFragment;
    "collateralNFT()": FunctionFragment;
    "collateralNFT_()": FunctionFragment;
    "computeCeiling(uint256,uint256)": FunctionFragment;
    "createInvestorUser()": FunctionFragment;
    "createLoanAndBorrow(address,uint256,uint256)": FunctionFragment;
    "createLoanAndWithdraw(address,uint256,uint256)": FunctionFragment;
    "createTestUsers()": FunctionFragment;
    "currdistributorBal()": FunctionFragment;
    "currency()": FunctionFragment;
    "currency_()": FunctionFragment;
    "defaultCollateral()": FunctionFragment;
    "deployCollateralNFT()": FunctionFragment;
    "deployContracts()": FunctionFragment;
    "deployCurrency()": FunctionFragment;
    "deployLender()": FunctionFragment;
    "deployLenderMockBorrower(address)": FunctionFragment;
    "deployTestRoot()": FunctionFragment;
    "failed()": FunctionFragment;
    "fixed18To27(uint256)": FunctionFragment;
    "fundLender(uint256)": FunctionFragment;
    "fundTranches()": FunctionFragment;
    "getRateByRisk(uint256)": FunctionFragment;
    "hevm()": FunctionFragment;
    "invest(uint256)": FunctionFragment;
    "issueNFT(address)": FunctionFragment;
    "issueNFTAndCreateLoan(address)": FunctionFragment;
    "lenderDeployer()": FunctionFragment;
    "lockNFT(uint256,address)": FunctionFragment;
    "prepareDeployLender(address)": FunctionFragment;
    "priceNFT(uint256,uint256)": FunctionFragment;
    "priceNFTandSetRisk(uint256,uint256,uint256)": FunctionFragment;
    "rdiv(uint256,uint256)": FunctionFragment;
    "repayLoan(address,uint256,uint256)": FunctionFragment;
    "rmul(uint256,uint256)": FunctionFragment;
    "safeAdd(uint256,uint256)": FunctionFragment;
    "safeDiv(uint256,uint256)": FunctionFragment;
    "safeMul(uint256,uint256)": FunctionFragment;
    "safeSub(uint256,uint256)": FunctionFragment;
    "seize(uint256)": FunctionFragment;
    "setUp()": FunctionFragment;
    "setupCurrencyOnLender(uint256)": FunctionFragment;
    "setupLoan(uint256,address,uint256,uint256)": FunctionFragment;
    "setupOngoingLoan()": FunctionFragment;
    "setupRepayReq()": FunctionFragment;
    "supplyFunds(uint256,address)": FunctionFragment;
    "testBorrow()": FunctionFragment;
    "testBorrowWithFixedFee()": FunctionFragment;
    "testFailBorrowAmountTooHigh()": FunctionFragment;
    "testFailBorrowNFTNotLocked()": FunctionFragment;
    "testFailBorrowNotLoanOwner()": FunctionFragment;
    "testFailPartialBorrowWithInterest()": FunctionFragment;
    "testInterestAccruedOnFixedFee()": FunctionFragment;
    "testPartialBorrow()": FunctionFragment;
    "topUp(address)": FunctionFragment;
    "transferNFT(address,address,uint256)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "IS_TEST", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "addKeeperAndCollect",
    values: [BigNumberish, string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "admin", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "assertEq",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "assertPostCondition",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "assertPreCondition",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "baseSetup", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "borrow",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "borrowRepay",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "borrowerDeployer",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "checkAfterBorrow",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "checkAfterRepay",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "collateralNFT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "collateralNFT_",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "computeCeiling",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createInvestorUser",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "createLoanAndBorrow",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createLoanAndWithdraw",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createTestUsers",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "currdistributorBal",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "currency", values?: undefined): string;
  encodeFunctionData(functionFragment: "currency_", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "defaultCollateral",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "deployCollateralNFT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "deployContracts",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "deployCurrency",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "deployLender",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "deployLenderMockBorrower",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "deployTestRoot",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "failed", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "fixed18To27",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "fundLender",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "fundTranches",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRateByRisk",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "hevm", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "invest",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "issueNFT", values: [string]): string;
  encodeFunctionData(
    functionFragment: "issueNFTAndCreateLoan",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "lenderDeployer",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lockNFT",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "prepareDeployLender",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "priceNFT",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "priceNFTandSetRisk",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "rdiv",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "repayLoan",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "rmul",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "safeAdd",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "safeDiv",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "safeMul",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "safeSub",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "seize", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "setUp", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setupCurrencyOnLender",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setupLoan",
    values: [BigNumberish, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setupOngoingLoan",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setupRepayReq",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "supplyFunds",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "testBorrow",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "testBorrowWithFixedFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "testFailBorrowAmountTooHigh",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "testFailBorrowNFTNotLocked",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "testFailBorrowNotLoanOwner",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "testFailPartialBorrowWithInterest",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "testInterestAccruedOnFixedFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "testPartialBorrow",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "topUp", values: [string]): string;
  encodeFunctionData(
    functionFragment: "transferNFT",
    values: [string, string, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "IS_TEST", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addKeeperAndCollect",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "admin", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "assertEq", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "assertPostCondition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "assertPreCondition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "baseSetup", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "borrow", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "borrowRepay",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "borrowerDeployer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkAfterBorrow",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkAfterRepay",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "collateralNFT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "collateralNFT_",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "computeCeiling",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createInvestorUser",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createLoanAndBorrow",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createLoanAndWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createTestUsers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currdistributorBal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "currency", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "currency_", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "defaultCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deployCollateralNFT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deployContracts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deployCurrency",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deployLender",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deployLenderMockBorrower",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deployTestRoot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "failed", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "fixed18To27",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "fundLender", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "fundTranches",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRateByRisk",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "hevm", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "invest", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "issueNFT", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "issueNFTAndCreateLoan",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lenderDeployer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "lockNFT", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "prepareDeployLender",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "priceNFT", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "priceNFTandSetRisk",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "rdiv", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "repayLoan", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "rmul", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "safeAdd", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "safeDiv", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "safeMul", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "safeSub", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "seize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setUp", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setupCurrencyOnLender",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setupLoan", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setupOngoingLoan",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setupRepayReq",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supplyFunds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "testBorrow", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "testBorrowWithFixedFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testFailBorrowAmountTooHigh",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testFailBorrowNFTNotLocked",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testFailBorrowNotLoanOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testFailPartialBorrowWithInterest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testInterestAccruedOnFixedFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testPartialBorrow",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "topUp", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferNFT",
    data: BytesLike
  ): Result;

  events: {
    "eventListener(address,bool)": EventFragment;
    "log_bytes32(bytes32)": EventFragment;
    "log_named_address(bytes32,address)": EventFragment;
    "log_named_bytes32(bytes32,bytes32)": EventFragment;
    "log_named_decimal_int(bytes32,int256,uint256)": EventFragment;
    "log_named_decimal_uint(bytes32,uint256,uint256)": EventFragment;
    "log_named_int(bytes32,int256)": EventFragment;
    "log_named_string(bytes32,string)": EventFragment;
    "log_named_uint(bytes32,uint256)": EventFragment;
    "logs(bytes)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "eventListener"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log_bytes32"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log_named_address"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log_named_bytes32"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log_named_decimal_int"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log_named_decimal_uint"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log_named_int"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log_named_string"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log_named_uint"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "logs"): EventFragment;
}

export type eventListenerEvent = TypedEvent<
  [string, boolean] & { target: string; exact: boolean }
>;

export type log_bytes32Event = TypedEvent<[string] & { arg0: string }>;

export type log_named_addressEvent = TypedEvent<
  [string, string] & { key: string; val: string }
>;

export type log_named_bytes32Event = TypedEvent<
  [string, string] & { key: string; val: string }
>;

export type log_named_decimal_intEvent = TypedEvent<
  [string, BigNumber, BigNumber] & {
    key: string;
    val: BigNumber;
    decimals: BigNumber;
  }
>;

export type log_named_decimal_uintEvent = TypedEvent<
  [string, BigNumber, BigNumber] & {
    key: string;
    val: BigNumber;
    decimals: BigNumber;
  }
>;

export type log_named_intEvent = TypedEvent<
  [string, BigNumber] & { key: string; val: BigNumber }
>;

export type log_named_stringEvent = TypedEvent<
  [string, string] & { key: string; val: string }
>;

export type log_named_uintEvent = TypedEvent<
  [string, BigNumber] & { key: string; val: BigNumber }
>;

export type logsEvent = TypedEvent<[string] & { arg0: string }>;

export class PrincipalBorrowTest extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: PrincipalBorrowTestInterface;

  functions: {
    IS_TEST(overrides?: CallOverrides): Promise<[boolean]>;

    addKeeperAndCollect(
      loanId: BigNumberish,
      usr: string,
      recoveryPrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    admin(overrides?: CallOverrides): Promise<[string]>;

    assertEq(
      a: BigNumberish,
      b: BigNumberish,
      precision: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    assertPostCondition(
      loanId: BigNumberish,
      tokenId: BigNumberish,
      amount: BigNumberish,
      fixedFee: BigNumberish,
      initialTotalBalance: BigNumberish,
      initialLoanBalance: BigNumberish,
      initialLoanDebt: BigNumberish,
      initialCeiling: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    assertPreCondition(
      loanId: BigNumberish,
      tokenId: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    baseSetup(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "borrow(uint256,uint256,uint256,uint256)"(
      loanId: BigNumberish,
      tokenId: BigNumberish,
      amount: BigNumberish,
      fixedFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "borrow(uint256,uint256,uint256)"(
      loan: BigNumberish,
      tokenId: BigNumberish,
      borrowAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "borrow(uint256,uint256,uint256,bool)"(
      loan: BigNumberish,
      tokenId: BigNumberish,
      borrowAmount: BigNumberish,
      fundLenderRequired: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    borrowRepay(
      nftPrice: BigNumberish,
      riskGroup: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    borrowerDeployer(overrides?: CallOverrides): Promise<[string]>;

    checkAfterBorrow(
      tokenId: BigNumberish,
      tBalance: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    checkAfterRepay(
      loan: BigNumberish,
      tokenId: BigNumberish,
      tTotal: BigNumberish,
      tLender: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    collateralNFT(overrides?: CallOverrides): Promise<[string]>;

    collateralNFT_(overrides?: CallOverrides): Promise<[string]>;

    computeCeiling(
      riskGroup: BigNumberish,
      nftPrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    createInvestorUser(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    createLoanAndBorrow(
      usr: string,
      nftPrice: BigNumberish,
      riskGroup: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    createLoanAndWithdraw(
      usr: string,
      nftPrice: BigNumberish,
      riskGroup: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    createTestUsers(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    currdistributorBal(overrides?: CallOverrides): Promise<[BigNumber]>;

    currency(overrides?: CallOverrides): Promise<[string]>;

    currency_(overrides?: CallOverrides): Promise<[string]>;

    defaultCollateral(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { nftPrice_: BigNumber; riskGroup_: BigNumber }
    >;

    deployCollateralNFT(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    deployContracts(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    deployCurrency(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    deployLender(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    deployLenderMockBorrower(
      rootAddr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    deployTestRoot(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    failed(overrides?: CallOverrides): Promise<[boolean]>;

    fixed18To27(
      valPower18: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    fundLender(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    fundTranches(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getRateByRisk(
      riskGroup: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    hevm(overrides?: CallOverrides): Promise<[string]>;

    invest(
      currencyAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    issueNFT(
      usr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    issueNFTAndCreateLoan(
      usr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    lenderDeployer(overrides?: CallOverrides): Promise<[string]>;

    lockNFT(
      loanId: BigNumberish,
      usr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    prepareDeployLender(
      rootAddr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    priceNFT(
      tokenId: BigNumberish,
      nftPrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "priceNFTandSetRisk(uint256,uint256,uint256)"(
      tokenId: BigNumberish,
      nftPrice: BigNumberish,
      riskGroup: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "priceNFTandSetRisk(uint256,uint256,uint256,uint256)"(
      tokenId: BigNumberish,
      nftPrice: BigNumberish,
      riskGroup: BigNumberish,
      maturityDate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    rdiv(
      x: BigNumberish,
      y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { z: BigNumber }>;

    repayLoan(
      usr: string,
      loanId: BigNumberish,
      currencyAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    rmul(
      x: BigNumberish,
      y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { z: BigNumber }>;

    safeAdd(
      x: BigNumberish,
      y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { z: BigNumber }>;

    safeDiv(
      x: BigNumberish,
      y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { z: BigNumber }>;

    safeMul(
      x: BigNumberish,
      y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { z: BigNumber }>;

    safeSub(
      x: BigNumberish,
      y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { z: BigNumber }>;

    seize(
      loanId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setUp(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setupCurrencyOnLender(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setupLoan(uint256,address,uint256,uint256)"(
      tokenId: BigNumberish,
      collateralNFT_: string,
      nftPrice: BigNumberish,
      riskGroup: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setupLoan(uint256,address,uint256,uint256,uint256)"(
      tokenId: BigNumberish,
      collateralNFT_: string,
      nftPrice: BigNumberish,
      riskGroup: BigNumberish,
      maturityDate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setupOngoingLoan()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setupOngoingLoan(uint256,uint256,bool,uint256)"(
      nftPrice: BigNumberish,
      borrowAmount: BigNumberish,
      lenderFundingRequired: boolean,
      maturityDate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setupRepayReq(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    supplyFunds(
      amount: BigNumberish,
      addr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    testBorrow(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    testBorrowWithFixedFee(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    testFailBorrowAmountTooHigh(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    testFailBorrowNFTNotLocked(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    testFailBorrowNotLoanOwner(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    testFailPartialBorrowWithInterest(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    testInterestAccruedOnFixedFee(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    testPartialBorrow(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    topUp(
      usr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferNFT(
      sender: string,
      recipient: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  IS_TEST(overrides?: CallOverrides): Promise<boolean>;

  addKeeperAndCollect(
    loanId: BigNumberish,
    usr: string,
    recoveryPrice: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  admin(overrides?: CallOverrides): Promise<string>;

  assertEq(
    a: BigNumberish,
    b: BigNumberish,
    precision: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  assertPostCondition(
    loanId: BigNumberish,
    tokenId: BigNumberish,
    amount: BigNumberish,
    fixedFee: BigNumberish,
    initialTotalBalance: BigNumberish,
    initialLoanBalance: BigNumberish,
    initialLoanDebt: BigNumberish,
    initialCeiling: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  assertPreCondition(
    loanId: BigNumberish,
    tokenId: BigNumberish,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  baseSetup(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "borrow(uint256,uint256,uint256,uint256)"(
    loanId: BigNumberish,
    tokenId: BigNumberish,
    amount: BigNumberish,
    fixedFee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "borrow(uint256,uint256,uint256)"(
    loan: BigNumberish,
    tokenId: BigNumberish,
    borrowAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "borrow(uint256,uint256,uint256,bool)"(
    loan: BigNumberish,
    tokenId: BigNumberish,
    borrowAmount: BigNumberish,
    fundLenderRequired: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  borrowRepay(
    nftPrice: BigNumberish,
    riskGroup: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  borrowerDeployer(overrides?: CallOverrides): Promise<string>;

  checkAfterBorrow(
    tokenId: BigNumberish,
    tBalance: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  checkAfterRepay(
    loan: BigNumberish,
    tokenId: BigNumberish,
    tTotal: BigNumberish,
    tLender: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  collateralNFT(overrides?: CallOverrides): Promise<string>;

  collateralNFT_(overrides?: CallOverrides): Promise<string>;

  computeCeiling(
    riskGroup: BigNumberish,
    nftPrice: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  createInvestorUser(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  createLoanAndBorrow(
    usr: string,
    nftPrice: BigNumberish,
    riskGroup: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  createLoanAndWithdraw(
    usr: string,
    nftPrice: BigNumberish,
    riskGroup: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  createTestUsers(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  currdistributorBal(overrides?: CallOverrides): Promise<BigNumber>;

  currency(overrides?: CallOverrides): Promise<string>;

  currency_(overrides?: CallOverrides): Promise<string>;

  defaultCollateral(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { nftPrice_: BigNumber; riskGroup_: BigNumber }
  >;

  deployCollateralNFT(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  deployContracts(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  deployCurrency(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  deployLender(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  deployLenderMockBorrower(
    rootAddr: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  deployTestRoot(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  failed(overrides?: CallOverrides): Promise<boolean>;

  fixed18To27(
    valPower18: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  fundLender(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  fundTranches(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getRateByRisk(
    riskGroup: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  hevm(overrides?: CallOverrides): Promise<string>;

  invest(
    currencyAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  issueNFT(
    usr: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  issueNFTAndCreateLoan(
    usr: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  lenderDeployer(overrides?: CallOverrides): Promise<string>;

  lockNFT(
    loanId: BigNumberish,
    usr: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  prepareDeployLender(
    rootAddr: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  priceNFT(
    tokenId: BigNumberish,
    nftPrice: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "priceNFTandSetRisk(uint256,uint256,uint256)"(
    tokenId: BigNumberish,
    nftPrice: BigNumberish,
    riskGroup: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "priceNFTandSetRisk(uint256,uint256,uint256,uint256)"(
    tokenId: BigNumberish,
    nftPrice: BigNumberish,
    riskGroup: BigNumberish,
    maturityDate: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  rdiv(
    x: BigNumberish,
    y: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  repayLoan(
    usr: string,
    loanId: BigNumberish,
    currencyAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  rmul(
    x: BigNumberish,
    y: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  safeAdd(
    x: BigNumberish,
    y: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  safeDiv(
    x: BigNumberish,
    y: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  safeMul(
    x: BigNumberish,
    y: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  safeSub(
    x: BigNumberish,
    y: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  seize(
    loanId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setUp(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setupCurrencyOnLender(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setupLoan(uint256,address,uint256,uint256)"(
    tokenId: BigNumberish,
    collateralNFT_: string,
    nftPrice: BigNumberish,
    riskGroup: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setupLoan(uint256,address,uint256,uint256,uint256)"(
    tokenId: BigNumberish,
    collateralNFT_: string,
    nftPrice: BigNumberish,
    riskGroup: BigNumberish,
    maturityDate: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setupOngoingLoan()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setupOngoingLoan(uint256,uint256,bool,uint256)"(
    nftPrice: BigNumberish,
    borrowAmount: BigNumberish,
    lenderFundingRequired: boolean,
    maturityDate: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setupRepayReq(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  supplyFunds(
    amount: BigNumberish,
    addr: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  testBorrow(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  testBorrowWithFixedFee(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  testFailBorrowAmountTooHigh(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  testFailBorrowNFTNotLocked(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  testFailBorrowNotLoanOwner(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  testFailPartialBorrowWithInterest(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  testInterestAccruedOnFixedFee(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  testPartialBorrow(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  topUp(
    usr: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferNFT(
    sender: string,
    recipient: string,
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    IS_TEST(overrides?: CallOverrides): Promise<boolean>;

    addKeeperAndCollect(
      loanId: BigNumberish,
      usr: string,
      recoveryPrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    admin(overrides?: CallOverrides): Promise<string>;

    assertEq(
      a: BigNumberish,
      b: BigNumberish,
      precision: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    assertPostCondition(
      loanId: BigNumberish,
      tokenId: BigNumberish,
      amount: BigNumberish,
      fixedFee: BigNumberish,
      initialTotalBalance: BigNumberish,
      initialLoanBalance: BigNumberish,
      initialLoanDebt: BigNumberish,
      initialCeiling: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    assertPreCondition(
      loanId: BigNumberish,
      tokenId: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    baseSetup(overrides?: CallOverrides): Promise<void>;

    "borrow(uint256,uint256,uint256,uint256)"(
      loanId: BigNumberish,
      tokenId: BigNumberish,
      amount: BigNumberish,
      fixedFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "borrow(uint256,uint256,uint256)"(
      loan: BigNumberish,
      tokenId: BigNumberish,
      borrowAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "borrow(uint256,uint256,uint256,bool)"(
      loan: BigNumberish,
      tokenId: BigNumberish,
      borrowAmount: BigNumberish,
      fundLenderRequired: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    borrowRepay(
      nftPrice: BigNumberish,
      riskGroup: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    borrowerDeployer(overrides?: CallOverrides): Promise<string>;

    checkAfterBorrow(
      tokenId: BigNumberish,
      tBalance: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    checkAfterRepay(
      loan: BigNumberish,
      tokenId: BigNumberish,
      tTotal: BigNumberish,
      tLender: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    collateralNFT(overrides?: CallOverrides): Promise<string>;

    collateralNFT_(overrides?: CallOverrides): Promise<string>;

    computeCeiling(
      riskGroup: BigNumberish,
      nftPrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    createInvestorUser(overrides?: CallOverrides): Promise<void>;

    createLoanAndBorrow(
      usr: string,
      nftPrice: BigNumberish,
      riskGroup: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    createLoanAndWithdraw(
      usr: string,
      nftPrice: BigNumberish,
      riskGroup: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    createTestUsers(overrides?: CallOverrides): Promise<void>;

    currdistributorBal(overrides?: CallOverrides): Promise<BigNumber>;

    currency(overrides?: CallOverrides): Promise<string>;

    currency_(overrides?: CallOverrides): Promise<string>;

    defaultCollateral(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { nftPrice_: BigNumber; riskGroup_: BigNumber }
    >;

    deployCollateralNFT(overrides?: CallOverrides): Promise<void>;

    deployContracts(overrides?: CallOverrides): Promise<void>;

    deployCurrency(overrides?: CallOverrides): Promise<void>;

    deployLender(overrides?: CallOverrides): Promise<void>;

    deployLenderMockBorrower(
      rootAddr: string,
      overrides?: CallOverrides
    ): Promise<void>;

    deployTestRoot(overrides?: CallOverrides): Promise<void>;

    failed(overrides?: CallOverrides): Promise<boolean>;

    fixed18To27(
      valPower18: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    fundLender(amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    fundTranches(overrides?: CallOverrides): Promise<void>;

    getRateByRisk(
      riskGroup: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hevm(overrides?: CallOverrides): Promise<string>;

    invest(
      currencyAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    issueNFT(
      usr: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber, string] & { tokenId: BigNumber; lookupId: string }>;

    issueNFTAndCreateLoan(
      usr: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    lenderDeployer(overrides?: CallOverrides): Promise<string>;

    lockNFT(
      loanId: BigNumberish,
      usr: string,
      overrides?: CallOverrides
    ): Promise<void>;

    prepareDeployLender(
      rootAddr: string,
      overrides?: CallOverrides
    ): Promise<void>;

    priceNFT(
      tokenId: BigNumberish,
      nftPrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "priceNFTandSetRisk(uint256,uint256,uint256)"(
      tokenId: BigNumberish,
      nftPrice: BigNumberish,
      riskGroup: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "priceNFTandSetRisk(uint256,uint256,uint256,uint256)"(
      tokenId: BigNumberish,
      nftPrice: BigNumberish,
      riskGroup: BigNumberish,
      maturityDate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    rdiv(
      x: BigNumberish,
      y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    repayLoan(
      usr: string,
      loanId: BigNumberish,
      currencyAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    rmul(
      x: BigNumberish,
      y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    safeAdd(
      x: BigNumberish,
      y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    safeDiv(
      x: BigNumberish,
      y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    safeMul(
      x: BigNumberish,
      y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    safeSub(
      x: BigNumberish,
      y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    seize(loanId: BigNumberish, overrides?: CallOverrides): Promise<void>;

    setUp(overrides?: CallOverrides): Promise<void>;

    setupCurrencyOnLender(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setupLoan(uint256,address,uint256,uint256)"(
      tokenId: BigNumberish,
      collateralNFT_: string,
      nftPrice: BigNumberish,
      riskGroup: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "setupLoan(uint256,address,uint256,uint256,uint256)"(
      tokenId: BigNumberish,
      collateralNFT_: string,
      nftPrice: BigNumberish,
      riskGroup: BigNumberish,
      maturityDate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "setupOngoingLoan()"(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        loan: BigNumber;
        tokenId: BigNumber;
        ceiling: BigNumber;
      }
    >;

    "setupOngoingLoan(uint256,uint256,bool,uint256)"(
      nftPrice: BigNumberish,
      borrowAmount: BigNumberish,
      lenderFundingRequired: boolean,
      maturityDate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { loan: BigNumber; tokenId: BigNumber }
    >;

    setupRepayReq(overrides?: CallOverrides): Promise<BigNumber>;

    supplyFunds(
      amount: BigNumberish,
      addr: string,
      overrides?: CallOverrides
    ): Promise<void>;

    testBorrow(overrides?: CallOverrides): Promise<void>;

    testBorrowWithFixedFee(overrides?: CallOverrides): Promise<void>;

    testFailBorrowAmountTooHigh(overrides?: CallOverrides): Promise<void>;

    testFailBorrowNFTNotLocked(overrides?: CallOverrides): Promise<void>;

    testFailBorrowNotLoanOwner(overrides?: CallOverrides): Promise<void>;

    testFailPartialBorrowWithInterest(overrides?: CallOverrides): Promise<void>;

    testInterestAccruedOnFixedFee(overrides?: CallOverrides): Promise<void>;

    testPartialBorrow(overrides?: CallOverrides): Promise<void>;

    topUp(usr: string, overrides?: CallOverrides): Promise<void>;

    transferNFT(
      sender: string,
      recipient: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "eventListener(address,bool)"(
      target?: null,
      exact?: null
    ): TypedEventFilter<[string, boolean], { target: string; exact: boolean }>;

    eventListener(
      target?: null,
      exact?: null
    ): TypedEventFilter<[string, boolean], { target: string; exact: boolean }>;

    "log_bytes32(bytes32)"(
      undefined?: null
    ): TypedEventFilter<[string], { arg0: string }>;

    log_bytes32(undefined?: null): TypedEventFilter<[string], { arg0: string }>;

    "log_named_address(bytes32,address)"(
      key?: null,
      val?: null
    ): TypedEventFilter<[string, string], { key: string; val: string }>;

    log_named_address(
      key?: null,
      val?: null
    ): TypedEventFilter<[string, string], { key: string; val: string }>;

    "log_named_bytes32(bytes32,bytes32)"(
      key?: null,
      val?: null
    ): TypedEventFilter<[string, string], { key: string; val: string }>;

    log_named_bytes32(
      key?: null,
      val?: null
    ): TypedEventFilter<[string, string], { key: string; val: string }>;

    "log_named_decimal_int(bytes32,int256,uint256)"(
      key?: null,
      val?: null,
      decimals?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { key: string; val: BigNumber; decimals: BigNumber }
    >;

    log_named_decimal_int(
      key?: null,
      val?: null,
      decimals?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { key: string; val: BigNumber; decimals: BigNumber }
    >;

    "log_named_decimal_uint(bytes32,uint256,uint256)"(
      key?: null,
      val?: null,
      decimals?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { key: string; val: BigNumber; decimals: BigNumber }
    >;

    log_named_decimal_uint(
      key?: null,
      val?: null,
      decimals?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { key: string; val: BigNumber; decimals: BigNumber }
    >;

    "log_named_int(bytes32,int256)"(
      key?: null,
      val?: null
    ): TypedEventFilter<[string, BigNumber], { key: string; val: BigNumber }>;

    log_named_int(
      key?: null,
      val?: null
    ): TypedEventFilter<[string, BigNumber], { key: string; val: BigNumber }>;

    "log_named_string(bytes32,string)"(
      key?: null,
      val?: null
    ): TypedEventFilter<[string, string], { key: string; val: string }>;

    log_named_string(
      key?: null,
      val?: null
    ): TypedEventFilter<[string, string], { key: string; val: string }>;

    "log_named_uint(bytes32,uint256)"(
      key?: null,
      val?: null
    ): TypedEventFilter<[string, BigNumber], { key: string; val: BigNumber }>;

    log_named_uint(
      key?: null,
      val?: null
    ): TypedEventFilter<[string, BigNumber], { key: string; val: BigNumber }>;

    "logs(bytes)"(
      undefined?: null
    ): TypedEventFilter<[string], { arg0: string }>;

    logs(undefined?: null): TypedEventFilter<[string], { arg0: string }>;
  };

  estimateGas: {
    IS_TEST(overrides?: CallOverrides): Promise<BigNumber>;

    addKeeperAndCollect(
      loanId: BigNumberish,
      usr: string,
      recoveryPrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    admin(overrides?: CallOverrides): Promise<BigNumber>;

    assertEq(
      a: BigNumberish,
      b: BigNumberish,
      precision: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    assertPostCondition(
      loanId: BigNumberish,
      tokenId: BigNumberish,
      amount: BigNumberish,
      fixedFee: BigNumberish,
      initialTotalBalance: BigNumberish,
      initialLoanBalance: BigNumberish,
      initialLoanDebt: BigNumberish,
      initialCeiling: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    assertPreCondition(
      loanId: BigNumberish,
      tokenId: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    baseSetup(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "borrow(uint256,uint256,uint256,uint256)"(
      loanId: BigNumberish,
      tokenId: BigNumberish,
      amount: BigNumberish,
      fixedFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "borrow(uint256,uint256,uint256)"(
      loan: BigNumberish,
      tokenId: BigNumberish,
      borrowAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "borrow(uint256,uint256,uint256,bool)"(
      loan: BigNumberish,
      tokenId: BigNumberish,
      borrowAmount: BigNumberish,
      fundLenderRequired: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    borrowRepay(
      nftPrice: BigNumberish,
      riskGroup: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    borrowerDeployer(overrides?: CallOverrides): Promise<BigNumber>;

    checkAfterBorrow(
      tokenId: BigNumberish,
      tBalance: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    checkAfterRepay(
      loan: BigNumberish,
      tokenId: BigNumberish,
      tTotal: BigNumberish,
      tLender: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    collateralNFT(overrides?: CallOverrides): Promise<BigNumber>;

    collateralNFT_(overrides?: CallOverrides): Promise<BigNumber>;

    computeCeiling(
      riskGroup: BigNumberish,
      nftPrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    createInvestorUser(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    createLoanAndBorrow(
      usr: string,
      nftPrice: BigNumberish,
      riskGroup: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    createLoanAndWithdraw(
      usr: string,
      nftPrice: BigNumberish,
      riskGroup: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    createTestUsers(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    currdistributorBal(overrides?: CallOverrides): Promise<BigNumber>;

    currency(overrides?: CallOverrides): Promise<BigNumber>;

    currency_(overrides?: CallOverrides): Promise<BigNumber>;

    defaultCollateral(overrides?: CallOverrides): Promise<BigNumber>;

    deployCollateralNFT(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    deployContracts(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    deployCurrency(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    deployLender(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    deployLenderMockBorrower(
      rootAddr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    deployTestRoot(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    failed(overrides?: CallOverrides): Promise<BigNumber>;

    fixed18To27(
      valPower18: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    fundLender(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    fundTranches(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getRateByRisk(
      riskGroup: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hevm(overrides?: CallOverrides): Promise<BigNumber>;

    invest(
      currencyAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    issueNFT(
      usr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    issueNFTAndCreateLoan(
      usr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    lenderDeployer(overrides?: CallOverrides): Promise<BigNumber>;

    lockNFT(
      loanId: BigNumberish,
      usr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    prepareDeployLender(
      rootAddr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    priceNFT(
      tokenId: BigNumberish,
      nftPrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "priceNFTandSetRisk(uint256,uint256,uint256)"(
      tokenId: BigNumberish,
      nftPrice: BigNumberish,
      riskGroup: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "priceNFTandSetRisk(uint256,uint256,uint256,uint256)"(
      tokenId: BigNumberish,
      nftPrice: BigNumberish,
      riskGroup: BigNumberish,
      maturityDate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    rdiv(
      x: BigNumberish,
      y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    repayLoan(
      usr: string,
      loanId: BigNumberish,
      currencyAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    rmul(
      x: BigNumberish,
      y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    safeAdd(
      x: BigNumberish,
      y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    safeDiv(
      x: BigNumberish,
      y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    safeMul(
      x: BigNumberish,
      y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    safeSub(
      x: BigNumberish,
      y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    seize(
      loanId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setUp(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setupCurrencyOnLender(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setupLoan(uint256,address,uint256,uint256)"(
      tokenId: BigNumberish,
      collateralNFT_: string,
      nftPrice: BigNumberish,
      riskGroup: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setupLoan(uint256,address,uint256,uint256,uint256)"(
      tokenId: BigNumberish,
      collateralNFT_: string,
      nftPrice: BigNumberish,
      riskGroup: BigNumberish,
      maturityDate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setupOngoingLoan()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setupOngoingLoan(uint256,uint256,bool,uint256)"(
      nftPrice: BigNumberish,
      borrowAmount: BigNumberish,
      lenderFundingRequired: boolean,
      maturityDate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setupRepayReq(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    supplyFunds(
      amount: BigNumberish,
      addr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    testBorrow(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    testBorrowWithFixedFee(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    testFailBorrowAmountTooHigh(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    testFailBorrowNFTNotLocked(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    testFailBorrowNotLoanOwner(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    testFailPartialBorrowWithInterest(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    testInterestAccruedOnFixedFee(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    testPartialBorrow(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    topUp(
      usr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferNFT(
      sender: string,
      recipient: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    IS_TEST(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addKeeperAndCollect(
      loanId: BigNumberish,
      usr: string,
      recoveryPrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    admin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    assertEq(
      a: BigNumberish,
      b: BigNumberish,
      precision: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    assertPostCondition(
      loanId: BigNumberish,
      tokenId: BigNumberish,
      amount: BigNumberish,
      fixedFee: BigNumberish,
      initialTotalBalance: BigNumberish,
      initialLoanBalance: BigNumberish,
      initialLoanDebt: BigNumberish,
      initialCeiling: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    assertPreCondition(
      loanId: BigNumberish,
      tokenId: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    baseSetup(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "borrow(uint256,uint256,uint256,uint256)"(
      loanId: BigNumberish,
      tokenId: BigNumberish,
      amount: BigNumberish,
      fixedFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "borrow(uint256,uint256,uint256)"(
      loan: BigNumberish,
      tokenId: BigNumberish,
      borrowAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "borrow(uint256,uint256,uint256,bool)"(
      loan: BigNumberish,
      tokenId: BigNumberish,
      borrowAmount: BigNumberish,
      fundLenderRequired: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    borrowRepay(
      nftPrice: BigNumberish,
      riskGroup: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    borrowerDeployer(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    checkAfterBorrow(
      tokenId: BigNumberish,
      tBalance: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    checkAfterRepay(
      loan: BigNumberish,
      tokenId: BigNumberish,
      tTotal: BigNumberish,
      tLender: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    collateralNFT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    collateralNFT_(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    computeCeiling(
      riskGroup: BigNumberish,
      nftPrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    createInvestorUser(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    createLoanAndBorrow(
      usr: string,
      nftPrice: BigNumberish,
      riskGroup: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    createLoanAndWithdraw(
      usr: string,
      nftPrice: BigNumberish,
      riskGroup: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    createTestUsers(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    currdistributorBal(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    currency(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    currency_(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    defaultCollateral(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    deployCollateralNFT(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    deployContracts(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    deployCurrency(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    deployLender(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    deployLenderMockBorrower(
      rootAddr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    deployTestRoot(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    failed(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    fixed18To27(
      valPower18: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    fundLender(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    fundTranches(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getRateByRisk(
      riskGroup: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hevm(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    invest(
      currencyAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    issueNFT(
      usr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    issueNFTAndCreateLoan(
      usr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    lenderDeployer(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lockNFT(
      loanId: BigNumberish,
      usr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    prepareDeployLender(
      rootAddr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    priceNFT(
      tokenId: BigNumberish,
      nftPrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "priceNFTandSetRisk(uint256,uint256,uint256)"(
      tokenId: BigNumberish,
      nftPrice: BigNumberish,
      riskGroup: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "priceNFTandSetRisk(uint256,uint256,uint256,uint256)"(
      tokenId: BigNumberish,
      nftPrice: BigNumberish,
      riskGroup: BigNumberish,
      maturityDate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    rdiv(
      x: BigNumberish,
      y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    repayLoan(
      usr: string,
      loanId: BigNumberish,
      currencyAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    rmul(
      x: BigNumberish,
      y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    safeAdd(
      x: BigNumberish,
      y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    safeDiv(
      x: BigNumberish,
      y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    safeMul(
      x: BigNumberish,
      y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    safeSub(
      x: BigNumberish,
      y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    seize(
      loanId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setUp(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setupCurrencyOnLender(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setupLoan(uint256,address,uint256,uint256)"(
      tokenId: BigNumberish,
      collateralNFT_: string,
      nftPrice: BigNumberish,
      riskGroup: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setupLoan(uint256,address,uint256,uint256,uint256)"(
      tokenId: BigNumberish,
      collateralNFT_: string,
      nftPrice: BigNumberish,
      riskGroup: BigNumberish,
      maturityDate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setupOngoingLoan()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setupOngoingLoan(uint256,uint256,bool,uint256)"(
      nftPrice: BigNumberish,
      borrowAmount: BigNumberish,
      lenderFundingRequired: boolean,
      maturityDate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setupRepayReq(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    supplyFunds(
      amount: BigNumberish,
      addr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    testBorrow(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    testBorrowWithFixedFee(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    testFailBorrowAmountTooHigh(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    testFailBorrowNFTNotLocked(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    testFailBorrowNotLoanOwner(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    testFailPartialBorrowWithInterest(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    testInterestAccruedOnFixedFee(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    testPartialBorrow(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    topUp(
      usr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferNFT(
      sender: string,
      recipient: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
