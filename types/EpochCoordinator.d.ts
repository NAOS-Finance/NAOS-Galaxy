/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface EpochCoordinatorInterface extends ethers.utils.Interface {
  functions: {
    "BIG_NUMBER()": FunctionFragment;
    "ERR_CURRENCY_AVAILABLE()": FunctionFragment;
    "ERR_MAX_ORDER()": FunctionFragment;
    "ERR_MAX_RESERVE()": FunctionFragment;
    "ERR_MAX_SENIOR_RATIO()": FunctionFragment;
    "ERR_MIN_SENIOR_RATIO()": FunctionFragment;
    "ERR_NOT_NEW_BEST()": FunctionFragment;
    "ERR_POOL_CLOSING()": FunctionFragment;
    "IMPROVEMENT_WEIGHT()": FunctionFragment;
    "NEW_BEST()": FunctionFragment;
    "SUCCESS()": FunctionFragment;
    "absDistance(uint256,uint256)": FunctionFragment;
    "assessor()": FunctionFragment;
    "bestRatioImprovement()": FunctionFragment;
    "bestReserveImprovement()": FunctionFragment;
    "bestSubScore()": FunctionFragment;
    "bestSubmission()": FunctionFragment;
    "calcAssets(uint256,uint256)": FunctionFragment;
    "calcFulfillment(uint256,uint256)": FunctionFragment;
    "calcNewReserve(uint256,uint256,uint256,uint256)": FunctionFragment;
    "calcSeniorAssetValue(uint256,uint256,uint256,uint256,uint256)": FunctionFragment;
    "calcSeniorRatio(uint256,uint256,uint256)": FunctionFragment;
    "challengeTime()": FunctionFragment;
    "checkRatioInRange(tuple,tuple,tuple)": FunctionFragment;
    "closeEpoch()": FunctionFragment;
    "currentEpoch()": FunctionFragment;
    "deny(address)": FunctionFragment;
    "depend(bytes32,address)": FunctionFragment;
    "epochJuniorTokenPrice()": FunctionFragment;
    "epochNAV()": FunctionFragment;
    "epochReserve()": FunctionFragment;
    "epochSeniorAsset()": FunctionFragment;
    "epochSeniorTokenPrice()": FunctionFragment;
    "executeEpoch()": FunctionFragment;
    "file(bytes32,uint256)": FunctionFragment;
    "gotFullValidSolution()": FunctionFragment;
    "juniorTranche()": FunctionFragment;
    "lastEpochClosed()": FunctionFragment;
    "lastEpochExecuted()": FunctionFragment;
    "minChallengePeriodEnd()": FunctionFragment;
    "minimumEpochTime()": FunctionFragment;
    "order()": FunctionFragment;
    "poolClosing()": FunctionFragment;
    "rdiv(uint256,uint256)": FunctionFragment;
    "rely(address)": FunctionFragment;
    "reserve()": FunctionFragment;
    "rmul(uint256,uint256)": FunctionFragment;
    "safeAdd(uint256,uint256)": FunctionFragment;
    "safeDiv(uint256,uint256)": FunctionFragment;
    "safeMul(uint256,uint256)": FunctionFragment;
    "safeSub(uint256,uint256)": FunctionFragment;
    "scoreImprovement(tuple,uint256)": FunctionFragment;
    "scoreRatioImprovement(tuple)": FunctionFragment;
    "scoreReserveImprovement(uint256)": FunctionFragment;
    "scoreSolution(uint256,uint256,uint256,uint256)": FunctionFragment;
    "seniorTranche()": FunctionFragment;
    "submissionPeriod()": FunctionFragment;
    "submitSolution(uint256,uint256,uint256,uint256)": FunctionFragment;
    "validate(uint256,uint256,uint256,uint256)": FunctionFragment;
    "validateCoreConstraints(uint256,uint256,uint256,uint256,uint256,uint256)": FunctionFragment;
    "validatePoolConstraints(uint256,uint256,uint256)": FunctionFragment;
    "wards(address)": FunctionFragment;
    "weightJuniorRedeem()": FunctionFragment;
    "weightJuniorSupply()": FunctionFragment;
    "weightSeniorRedeem()": FunctionFragment;
    "weightSeniorSupply()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "BIG_NUMBER",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ERR_CURRENCY_AVAILABLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ERR_MAX_ORDER",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ERR_MAX_RESERVE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ERR_MAX_SENIOR_RATIO",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ERR_MIN_SENIOR_RATIO",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ERR_NOT_NEW_BEST",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ERR_POOL_CLOSING",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "IMPROVEMENT_WEIGHT",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "NEW_BEST", values?: undefined): string;
  encodeFunctionData(functionFragment: "SUCCESS", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "absDistance",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "assessor", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "bestRatioImprovement",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "bestReserveImprovement",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "bestSubScore",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "bestSubmission",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "calcAssets",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "calcFulfillment",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "calcNewReserve",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "calcSeniorAssetValue",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "calcSeniorRatio",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "challengeTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "checkRatioInRange",
    values: [
      { value: BigNumberish },
      { value: BigNumberish },
      { value: BigNumberish }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "closeEpoch",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "currentEpoch",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "deny", values: [string]): string;
  encodeFunctionData(
    functionFragment: "depend",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "epochJuniorTokenPrice",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "epochNAV", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "epochReserve",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "epochSeniorAsset",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "epochSeniorTokenPrice",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "executeEpoch",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "file",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "gotFullValidSolution",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "juniorTranche",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lastEpochClosed",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lastEpochExecuted",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minChallengePeriodEnd",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minimumEpochTime",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "order", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "poolClosing",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rdiv",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "rely", values: [string]): string;
  encodeFunctionData(functionFragment: "reserve", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "rmul",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "safeAdd",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "safeDiv",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "safeMul",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "safeSub",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "scoreImprovement",
    values: [{ value: BigNumberish }, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "scoreRatioImprovement",
    values: [{ value: BigNumberish }]
  ): string;
  encodeFunctionData(
    functionFragment: "scoreReserveImprovement",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "scoreSolution",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "seniorTranche",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "submissionPeriod",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "submitSolution",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "validate",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "validateCoreConstraints",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "validatePoolConstraints",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "wards", values: [string]): string;
  encodeFunctionData(
    functionFragment: "weightJuniorRedeem",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "weightJuniorSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "weightSeniorRedeem",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "weightSeniorSupply",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "BIG_NUMBER", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "ERR_CURRENCY_AVAILABLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ERR_MAX_ORDER",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ERR_MAX_RESERVE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ERR_MAX_SENIOR_RATIO",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ERR_MIN_SENIOR_RATIO",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ERR_NOT_NEW_BEST",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ERR_POOL_CLOSING",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "IMPROVEMENT_WEIGHT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "NEW_BEST", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "SUCCESS", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "absDistance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "assessor", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "bestRatioImprovement",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "bestReserveImprovement",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "bestSubScore",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "bestSubmission",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "calcAssets", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "calcFulfillment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calcNewReserve",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calcSeniorAssetValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calcSeniorRatio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "challengeTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkRatioInRange",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "closeEpoch", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "currentEpoch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deny", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "depend", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "epochJuniorTokenPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "epochNAV", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "epochReserve",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "epochSeniorAsset",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "epochSeniorTokenPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeEpoch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "file", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "gotFullValidSolution",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "juniorTranche",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastEpochClosed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastEpochExecuted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minChallengePeriodEnd",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minimumEpochTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "order", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "poolClosing",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "rdiv", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "rely", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "reserve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "rmul", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "safeAdd", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "safeDiv", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "safeMul", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "safeSub", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "scoreImprovement",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "scoreRatioImprovement",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "scoreReserveImprovement",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "scoreSolution",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "seniorTranche",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "submissionPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "submitSolution",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "validate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "validateCoreConstraints",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "validatePoolConstraints",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "wards", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "weightJuniorRedeem",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "weightJuniorSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "weightSeniorRedeem",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "weightSeniorSupply",
    data: BytesLike
  ): Result;

  events: {
    "LogNote(bytes4,address,bytes32,bytes32,uint256,bytes)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "LogNote"): EventFragment;
}

export type LogNoteEvent = TypedEvent<
  [string, string, string, string, BigNumber, string] & {
    sig: string;
    guy: string;
    foo: string;
    bar: string;
    wad: BigNumber;
    fax: string;
  }
>;

export class EpochCoordinator extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: EpochCoordinatorInterface;

  functions: {
    BIG_NUMBER(overrides?: CallOverrides): Promise<[BigNumber]>;

    ERR_CURRENCY_AVAILABLE(overrides?: CallOverrides): Promise<[BigNumber]>;

    ERR_MAX_ORDER(overrides?: CallOverrides): Promise<[BigNumber]>;

    ERR_MAX_RESERVE(overrides?: CallOverrides): Promise<[BigNumber]>;

    ERR_MAX_SENIOR_RATIO(overrides?: CallOverrides): Promise<[BigNumber]>;

    ERR_MIN_SENIOR_RATIO(overrides?: CallOverrides): Promise<[BigNumber]>;

    ERR_NOT_NEW_BEST(overrides?: CallOverrides): Promise<[BigNumber]>;

    ERR_POOL_CLOSING(overrides?: CallOverrides): Promise<[BigNumber]>;

    IMPROVEMENT_WEIGHT(overrides?: CallOverrides): Promise<[BigNumber]>;

    NEW_BEST(overrides?: CallOverrides): Promise<[BigNumber]>;

    SUCCESS(overrides?: CallOverrides): Promise<[BigNumber]>;

    absDistance(
      x: BigNumberish,
      y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { delta: BigNumber }>;

    assessor(overrides?: CallOverrides): Promise<[string]>;

    bestRatioImprovement(overrides?: CallOverrides): Promise<[BigNumber]>;

    bestReserveImprovement(overrides?: CallOverrides): Promise<[BigNumber]>;

    bestSubScore(overrides?: CallOverrides): Promise<[BigNumber]>;

    bestSubmission(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        seniorRedeem: BigNumber;
        juniorRedeem: BigNumber;
        juniorSupply: BigNumber;
        seniorSupply: BigNumber;
      }
    >;

    calcAssets(
      NAV: BigNumberish,
      reserve_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    calcFulfillment(
      amount: BigNumberish,
      totalOrder: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [[BigNumber] & { value: BigNumber }] & {
        percent: [BigNumber] & { value: BigNumber };
      }
    >;

    calcNewReserve(
      seniorRedeem: BigNumberish,
      juniorRedeem: BigNumberish,
      seniorSupply: BigNumberish,
      juniorSupply: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    calcSeniorAssetValue(
      seniorRedeem: BigNumberish,
      seniorSupply: BigNumberish,
      currSeniorAsset: BigNumberish,
      reserve_: BigNumberish,
      nav_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { seniorAsset: BigNumber }>;

    calcSeniorRatio(
      seniorAsset: BigNumberish,
      NAV: BigNumberish,
      reserve_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    challengeTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    checkRatioInRange(
      ratio: { value: BigNumberish },
      minRatio: { value: BigNumberish },
      maxRatio: { value: BigNumberish },
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    closeEpoch(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    currentEpoch(overrides?: CallOverrides): Promise<[BigNumber]>;

    deny(
      usr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    depend(
      contractName: BytesLike,
      addr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    epochJuniorTokenPrice(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { value: BigNumber }>;

    epochNAV(overrides?: CallOverrides): Promise<[BigNumber]>;

    epochReserve(overrides?: CallOverrides): Promise<[BigNumber]>;

    epochSeniorAsset(overrides?: CallOverrides): Promise<[BigNumber]>;

    epochSeniorTokenPrice(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { value: BigNumber }>;

    executeEpoch(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    file(
      name: BytesLike,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    gotFullValidSolution(overrides?: CallOverrides): Promise<[boolean]>;

    juniorTranche(overrides?: CallOverrides): Promise<[string]>;

    lastEpochClosed(overrides?: CallOverrides): Promise<[BigNumber]>;

    lastEpochExecuted(overrides?: CallOverrides): Promise<[BigNumber]>;

    minChallengePeriodEnd(overrides?: CallOverrides): Promise<[BigNumber]>;

    minimumEpochTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    order(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        seniorRedeem: BigNumber;
        juniorRedeem: BigNumber;
        juniorSupply: BigNumber;
        seniorSupply: BigNumber;
      }
    >;

    poolClosing(overrides?: CallOverrides): Promise<[boolean]>;

    rdiv(
      x: BigNumberish,
      y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { z: BigNumber }>;

    rely(
      usr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    reserve(overrides?: CallOverrides): Promise<[string]>;

    rmul(
      x: BigNumberish,
      y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { z: BigNumber }>;

    safeAdd(
      x: BigNumberish,
      y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { z: BigNumber }>;

    safeDiv(
      x: BigNumberish,
      y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { z: BigNumber }>;

    safeMul(
      x: BigNumberish,
      y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { z: BigNumber }>;

    safeSub(
      x: BigNumberish,
      y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { z: BigNumber }>;

    scoreImprovement(
      newSeniorRatio_: { value: BigNumberish },
      newReserve_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, BigNumber]>;

    scoreRatioImprovement(
      newSeniorRatio: { value: BigNumberish },
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    scoreReserveImprovement(
      newReserve_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { score: BigNumber }>;

    scoreSolution(
      seniorRedeem: BigNumberish,
      juniorRedeem: BigNumberish,
      juniorSupply: BigNumberish,
      seniorSupply: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    seniorTranche(overrides?: CallOverrides): Promise<[string]>;

    submissionPeriod(overrides?: CallOverrides): Promise<[boolean]>;

    submitSolution(
      seniorRedeem: BigNumberish,
      juniorRedeem: BigNumberish,
      juniorSupply: BigNumberish,
      seniorSupply: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    validate(
      seniorRedeem: BigNumberish,
      juniorRedeem: BigNumberish,
      seniorSupply: BigNumberish,
      juniorSupply: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    validateCoreConstraints(
      currencyAvailable: BigNumberish,
      currencyOut: BigNumberish,
      seniorRedeem: BigNumberish,
      juniorRedeem: BigNumberish,
      seniorSupply: BigNumberish,
      juniorSupply: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { err: BigNumber }>;

    validatePoolConstraints(
      reserve_: BigNumberish,
      seniorAsset: BigNumberish,
      nav_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { err: BigNumber }>;

    wards(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    weightJuniorRedeem(overrides?: CallOverrides): Promise<[BigNumber]>;

    weightJuniorSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    weightSeniorRedeem(overrides?: CallOverrides): Promise<[BigNumber]>;

    weightSeniorSupply(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  BIG_NUMBER(overrides?: CallOverrides): Promise<BigNumber>;

  ERR_CURRENCY_AVAILABLE(overrides?: CallOverrides): Promise<BigNumber>;

  ERR_MAX_ORDER(overrides?: CallOverrides): Promise<BigNumber>;

  ERR_MAX_RESERVE(overrides?: CallOverrides): Promise<BigNumber>;

  ERR_MAX_SENIOR_RATIO(overrides?: CallOverrides): Promise<BigNumber>;

  ERR_MIN_SENIOR_RATIO(overrides?: CallOverrides): Promise<BigNumber>;

  ERR_NOT_NEW_BEST(overrides?: CallOverrides): Promise<BigNumber>;

  ERR_POOL_CLOSING(overrides?: CallOverrides): Promise<BigNumber>;

  IMPROVEMENT_WEIGHT(overrides?: CallOverrides): Promise<BigNumber>;

  NEW_BEST(overrides?: CallOverrides): Promise<BigNumber>;

  SUCCESS(overrides?: CallOverrides): Promise<BigNumber>;

  absDistance(
    x: BigNumberish,
    y: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  assessor(overrides?: CallOverrides): Promise<string>;

  bestRatioImprovement(overrides?: CallOverrides): Promise<BigNumber>;

  bestReserveImprovement(overrides?: CallOverrides): Promise<BigNumber>;

  bestSubScore(overrides?: CallOverrides): Promise<BigNumber>;

  bestSubmission(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber] & {
      seniorRedeem: BigNumber;
      juniorRedeem: BigNumber;
      juniorSupply: BigNumber;
      seniorSupply: BigNumber;
    }
  >;

  calcAssets(
    NAV: BigNumberish,
    reserve_: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  calcFulfillment(
    amount: BigNumberish,
    totalOrder: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[BigNumber] & { value: BigNumber }>;

  calcNewReserve(
    seniorRedeem: BigNumberish,
    juniorRedeem: BigNumberish,
    seniorSupply: BigNumberish,
    juniorSupply: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  calcSeniorAssetValue(
    seniorRedeem: BigNumberish,
    seniorSupply: BigNumberish,
    currSeniorAsset: BigNumberish,
    reserve_: BigNumberish,
    nav_: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  calcSeniorRatio(
    seniorAsset: BigNumberish,
    NAV: BigNumberish,
    reserve_: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  challengeTime(overrides?: CallOverrides): Promise<BigNumber>;

  checkRatioInRange(
    ratio: { value: BigNumberish },
    minRatio: { value: BigNumberish },
    maxRatio: { value: BigNumberish },
    overrides?: CallOverrides
  ): Promise<boolean>;

  closeEpoch(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  currentEpoch(overrides?: CallOverrides): Promise<BigNumber>;

  deny(
    usr: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  depend(
    contractName: BytesLike,
    addr: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  epochJuniorTokenPrice(overrides?: CallOverrides): Promise<BigNumber>;

  epochNAV(overrides?: CallOverrides): Promise<BigNumber>;

  epochReserve(overrides?: CallOverrides): Promise<BigNumber>;

  epochSeniorAsset(overrides?: CallOverrides): Promise<BigNumber>;

  epochSeniorTokenPrice(overrides?: CallOverrides): Promise<BigNumber>;

  executeEpoch(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  file(
    name: BytesLike,
    value: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  gotFullValidSolution(overrides?: CallOverrides): Promise<boolean>;

  juniorTranche(overrides?: CallOverrides): Promise<string>;

  lastEpochClosed(overrides?: CallOverrides): Promise<BigNumber>;

  lastEpochExecuted(overrides?: CallOverrides): Promise<BigNumber>;

  minChallengePeriodEnd(overrides?: CallOverrides): Promise<BigNumber>;

  minimumEpochTime(overrides?: CallOverrides): Promise<BigNumber>;

  order(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber] & {
      seniorRedeem: BigNumber;
      juniorRedeem: BigNumber;
      juniorSupply: BigNumber;
      seniorSupply: BigNumber;
    }
  >;

  poolClosing(overrides?: CallOverrides): Promise<boolean>;

  rdiv(
    x: BigNumberish,
    y: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  rely(
    usr: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  reserve(overrides?: CallOverrides): Promise<string>;

  rmul(
    x: BigNumberish,
    y: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  safeAdd(
    x: BigNumberish,
    y: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  safeDiv(
    x: BigNumberish,
    y: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  safeMul(
    x: BigNumberish,
    y: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  safeSub(
    x: BigNumberish,
    y: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  scoreImprovement(
    newSeniorRatio_: { value: BigNumberish },
    newReserve_: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber, BigNumber]>;

  scoreRatioImprovement(
    newSeniorRatio: { value: BigNumberish },
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  scoreReserveImprovement(
    newReserve_: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  scoreSolution(
    seniorRedeem: BigNumberish,
    juniorRedeem: BigNumberish,
    juniorSupply: BigNumberish,
    seniorSupply: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  seniorTranche(overrides?: CallOverrides): Promise<string>;

  submissionPeriod(overrides?: CallOverrides): Promise<boolean>;

  submitSolution(
    seniorRedeem: BigNumberish,
    juniorRedeem: BigNumberish,
    juniorSupply: BigNumberish,
    seniorSupply: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  validate(
    seniorRedeem: BigNumberish,
    juniorRedeem: BigNumberish,
    seniorSupply: BigNumberish,
    juniorSupply: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  validateCoreConstraints(
    currencyAvailable: BigNumberish,
    currencyOut: BigNumberish,
    seniorRedeem: BigNumberish,
    juniorRedeem: BigNumberish,
    seniorSupply: BigNumberish,
    juniorSupply: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  validatePoolConstraints(
    reserve_: BigNumberish,
    seniorAsset: BigNumberish,
    nav_: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  wards(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  weightJuniorRedeem(overrides?: CallOverrides): Promise<BigNumber>;

  weightJuniorSupply(overrides?: CallOverrides): Promise<BigNumber>;

  weightSeniorRedeem(overrides?: CallOverrides): Promise<BigNumber>;

  weightSeniorSupply(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    BIG_NUMBER(overrides?: CallOverrides): Promise<BigNumber>;

    ERR_CURRENCY_AVAILABLE(overrides?: CallOverrides): Promise<BigNumber>;

    ERR_MAX_ORDER(overrides?: CallOverrides): Promise<BigNumber>;

    ERR_MAX_RESERVE(overrides?: CallOverrides): Promise<BigNumber>;

    ERR_MAX_SENIOR_RATIO(overrides?: CallOverrides): Promise<BigNumber>;

    ERR_MIN_SENIOR_RATIO(overrides?: CallOverrides): Promise<BigNumber>;

    ERR_NOT_NEW_BEST(overrides?: CallOverrides): Promise<BigNumber>;

    ERR_POOL_CLOSING(overrides?: CallOverrides): Promise<BigNumber>;

    IMPROVEMENT_WEIGHT(overrides?: CallOverrides): Promise<BigNumber>;

    NEW_BEST(overrides?: CallOverrides): Promise<BigNumber>;

    SUCCESS(overrides?: CallOverrides): Promise<BigNumber>;

    absDistance(
      x: BigNumberish,
      y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    assessor(overrides?: CallOverrides): Promise<string>;

    bestRatioImprovement(overrides?: CallOverrides): Promise<BigNumber>;

    bestReserveImprovement(overrides?: CallOverrides): Promise<BigNumber>;

    bestSubScore(overrides?: CallOverrides): Promise<BigNumber>;

    bestSubmission(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        seniorRedeem: BigNumber;
        juniorRedeem: BigNumber;
        juniorSupply: BigNumber;
        seniorSupply: BigNumber;
      }
    >;

    calcAssets(
      NAV: BigNumberish,
      reserve_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calcFulfillment(
      amount: BigNumberish,
      totalOrder: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { value: BigNumber }>;

    calcNewReserve(
      seniorRedeem: BigNumberish,
      juniorRedeem: BigNumberish,
      seniorSupply: BigNumberish,
      juniorSupply: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calcSeniorAssetValue(
      seniorRedeem: BigNumberish,
      seniorSupply: BigNumberish,
      currSeniorAsset: BigNumberish,
      reserve_: BigNumberish,
      nav_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calcSeniorRatio(
      seniorAsset: BigNumberish,
      NAV: BigNumberish,
      reserve_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    challengeTime(overrides?: CallOverrides): Promise<BigNumber>;

    checkRatioInRange(
      ratio: { value: BigNumberish },
      minRatio: { value: BigNumberish },
      maxRatio: { value: BigNumberish },
      overrides?: CallOverrides
    ): Promise<boolean>;

    closeEpoch(overrides?: CallOverrides): Promise<void>;

    currentEpoch(overrides?: CallOverrides): Promise<BigNumber>;

    deny(usr: string, overrides?: CallOverrides): Promise<void>;

    depend(
      contractName: BytesLike,
      addr: string,
      overrides?: CallOverrides
    ): Promise<void>;

    epochJuniorTokenPrice(overrides?: CallOverrides): Promise<BigNumber>;

    epochNAV(overrides?: CallOverrides): Promise<BigNumber>;

    epochReserve(overrides?: CallOverrides): Promise<BigNumber>;

    epochSeniorAsset(overrides?: CallOverrides): Promise<BigNumber>;

    epochSeniorTokenPrice(overrides?: CallOverrides): Promise<BigNumber>;

    executeEpoch(overrides?: CallOverrides): Promise<void>;

    file(
      name: BytesLike,
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    gotFullValidSolution(overrides?: CallOverrides): Promise<boolean>;

    juniorTranche(overrides?: CallOverrides): Promise<string>;

    lastEpochClosed(overrides?: CallOverrides): Promise<BigNumber>;

    lastEpochExecuted(overrides?: CallOverrides): Promise<BigNumber>;

    minChallengePeriodEnd(overrides?: CallOverrides): Promise<BigNumber>;

    minimumEpochTime(overrides?: CallOverrides): Promise<BigNumber>;

    order(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        seniorRedeem: BigNumber;
        juniorRedeem: BigNumber;
        juniorSupply: BigNumber;
        seniorSupply: BigNumber;
      }
    >;

    poolClosing(overrides?: CallOverrides): Promise<boolean>;

    rdiv(
      x: BigNumberish,
      y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rely(usr: string, overrides?: CallOverrides): Promise<void>;

    reserve(overrides?: CallOverrides): Promise<string>;

    rmul(
      x: BigNumberish,
      y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    safeAdd(
      x: BigNumberish,
      y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    safeDiv(
      x: BigNumberish,
      y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    safeMul(
      x: BigNumberish,
      y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    safeSub(
      x: BigNumberish,
      y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    scoreImprovement(
      newSeniorRatio_: { value: BigNumberish },
      newReserve_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, BigNumber]>;

    scoreRatioImprovement(
      newSeniorRatio: { value: BigNumberish },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    scoreReserveImprovement(
      newReserve_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    scoreSolution(
      seniorRedeem: BigNumberish,
      juniorRedeem: BigNumberish,
      juniorSupply: BigNumberish,
      seniorSupply: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    seniorTranche(overrides?: CallOverrides): Promise<string>;

    submissionPeriod(overrides?: CallOverrides): Promise<boolean>;

    submitSolution(
      seniorRedeem: BigNumberish,
      juniorRedeem: BigNumberish,
      juniorSupply: BigNumberish,
      seniorSupply: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    validate(
      seniorRedeem: BigNumberish,
      juniorRedeem: BigNumberish,
      seniorSupply: BigNumberish,
      juniorSupply: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    validateCoreConstraints(
      currencyAvailable: BigNumberish,
      currencyOut: BigNumberish,
      seniorRedeem: BigNumberish,
      juniorRedeem: BigNumberish,
      seniorSupply: BigNumberish,
      juniorSupply: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    validatePoolConstraints(
      reserve_: BigNumberish,
      seniorAsset: BigNumberish,
      nav_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    wards(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    weightJuniorRedeem(overrides?: CallOverrides): Promise<BigNumber>;

    weightJuniorSupply(overrides?: CallOverrides): Promise<BigNumber>;

    weightSeniorRedeem(overrides?: CallOverrides): Promise<BigNumber>;

    weightSeniorSupply(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    "LogNote(bytes4,address,bytes32,bytes32,uint256,bytes)"(
      sig?: BytesLike | null,
      guy?: string | null,
      foo?: BytesLike | null,
      bar?: BytesLike | null,
      wad?: null,
      fax?: null
    ): TypedEventFilter<
      [string, string, string, string, BigNumber, string],
      {
        sig: string;
        guy: string;
        foo: string;
        bar: string;
        wad: BigNumber;
        fax: string;
      }
    >;

    LogNote(
      sig?: BytesLike | null,
      guy?: string | null,
      foo?: BytesLike | null,
      bar?: BytesLike | null,
      wad?: null,
      fax?: null
    ): TypedEventFilter<
      [string, string, string, string, BigNumber, string],
      {
        sig: string;
        guy: string;
        foo: string;
        bar: string;
        wad: BigNumber;
        fax: string;
      }
    >;
  };

  estimateGas: {
    BIG_NUMBER(overrides?: CallOverrides): Promise<BigNumber>;

    ERR_CURRENCY_AVAILABLE(overrides?: CallOverrides): Promise<BigNumber>;

    ERR_MAX_ORDER(overrides?: CallOverrides): Promise<BigNumber>;

    ERR_MAX_RESERVE(overrides?: CallOverrides): Promise<BigNumber>;

    ERR_MAX_SENIOR_RATIO(overrides?: CallOverrides): Promise<BigNumber>;

    ERR_MIN_SENIOR_RATIO(overrides?: CallOverrides): Promise<BigNumber>;

    ERR_NOT_NEW_BEST(overrides?: CallOverrides): Promise<BigNumber>;

    ERR_POOL_CLOSING(overrides?: CallOverrides): Promise<BigNumber>;

    IMPROVEMENT_WEIGHT(overrides?: CallOverrides): Promise<BigNumber>;

    NEW_BEST(overrides?: CallOverrides): Promise<BigNumber>;

    SUCCESS(overrides?: CallOverrides): Promise<BigNumber>;

    absDistance(
      x: BigNumberish,
      y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    assessor(overrides?: CallOverrides): Promise<BigNumber>;

    bestRatioImprovement(overrides?: CallOverrides): Promise<BigNumber>;

    bestReserveImprovement(overrides?: CallOverrides): Promise<BigNumber>;

    bestSubScore(overrides?: CallOverrides): Promise<BigNumber>;

    bestSubmission(overrides?: CallOverrides): Promise<BigNumber>;

    calcAssets(
      NAV: BigNumberish,
      reserve_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calcFulfillment(
      amount: BigNumberish,
      totalOrder: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calcNewReserve(
      seniorRedeem: BigNumberish,
      juniorRedeem: BigNumberish,
      seniorSupply: BigNumberish,
      juniorSupply: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calcSeniorAssetValue(
      seniorRedeem: BigNumberish,
      seniorSupply: BigNumberish,
      currSeniorAsset: BigNumberish,
      reserve_: BigNumberish,
      nav_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calcSeniorRatio(
      seniorAsset: BigNumberish,
      NAV: BigNumberish,
      reserve_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    challengeTime(overrides?: CallOverrides): Promise<BigNumber>;

    checkRatioInRange(
      ratio: { value: BigNumberish },
      minRatio: { value: BigNumberish },
      maxRatio: { value: BigNumberish },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    closeEpoch(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    currentEpoch(overrides?: CallOverrides): Promise<BigNumber>;

    deny(
      usr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    depend(
      contractName: BytesLike,
      addr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    epochJuniorTokenPrice(overrides?: CallOverrides): Promise<BigNumber>;

    epochNAV(overrides?: CallOverrides): Promise<BigNumber>;

    epochReserve(overrides?: CallOverrides): Promise<BigNumber>;

    epochSeniorAsset(overrides?: CallOverrides): Promise<BigNumber>;

    epochSeniorTokenPrice(overrides?: CallOverrides): Promise<BigNumber>;

    executeEpoch(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    file(
      name: BytesLike,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    gotFullValidSolution(overrides?: CallOverrides): Promise<BigNumber>;

    juniorTranche(overrides?: CallOverrides): Promise<BigNumber>;

    lastEpochClosed(overrides?: CallOverrides): Promise<BigNumber>;

    lastEpochExecuted(overrides?: CallOverrides): Promise<BigNumber>;

    minChallengePeriodEnd(overrides?: CallOverrides): Promise<BigNumber>;

    minimumEpochTime(overrides?: CallOverrides): Promise<BigNumber>;

    order(overrides?: CallOverrides): Promise<BigNumber>;

    poolClosing(overrides?: CallOverrides): Promise<BigNumber>;

    rdiv(
      x: BigNumberish,
      y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rely(
      usr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    reserve(overrides?: CallOverrides): Promise<BigNumber>;

    rmul(
      x: BigNumberish,
      y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    safeAdd(
      x: BigNumberish,
      y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    safeDiv(
      x: BigNumberish,
      y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    safeMul(
      x: BigNumberish,
      y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    safeSub(
      x: BigNumberish,
      y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    scoreImprovement(
      newSeniorRatio_: { value: BigNumberish },
      newReserve_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    scoreRatioImprovement(
      newSeniorRatio: { value: BigNumberish },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    scoreReserveImprovement(
      newReserve_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    scoreSolution(
      seniorRedeem: BigNumberish,
      juniorRedeem: BigNumberish,
      juniorSupply: BigNumberish,
      seniorSupply: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    seniorTranche(overrides?: CallOverrides): Promise<BigNumber>;

    submissionPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    submitSolution(
      seniorRedeem: BigNumberish,
      juniorRedeem: BigNumberish,
      juniorSupply: BigNumberish,
      seniorSupply: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    validate(
      seniorRedeem: BigNumberish,
      juniorRedeem: BigNumberish,
      seniorSupply: BigNumberish,
      juniorSupply: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    validateCoreConstraints(
      currencyAvailable: BigNumberish,
      currencyOut: BigNumberish,
      seniorRedeem: BigNumberish,
      juniorRedeem: BigNumberish,
      seniorSupply: BigNumberish,
      juniorSupply: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    validatePoolConstraints(
      reserve_: BigNumberish,
      seniorAsset: BigNumberish,
      nav_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    wards(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    weightJuniorRedeem(overrides?: CallOverrides): Promise<BigNumber>;

    weightJuniorSupply(overrides?: CallOverrides): Promise<BigNumber>;

    weightSeniorRedeem(overrides?: CallOverrides): Promise<BigNumber>;

    weightSeniorSupply(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    BIG_NUMBER(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ERR_CURRENCY_AVAILABLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ERR_MAX_ORDER(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ERR_MAX_RESERVE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ERR_MAX_SENIOR_RATIO(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ERR_MIN_SENIOR_RATIO(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ERR_NOT_NEW_BEST(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ERR_POOL_CLOSING(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    IMPROVEMENT_WEIGHT(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    NEW_BEST(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    SUCCESS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    absDistance(
      x: BigNumberish,
      y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    assessor(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    bestRatioImprovement(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    bestReserveImprovement(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    bestSubScore(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    bestSubmission(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    calcAssets(
      NAV: BigNumberish,
      reserve_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calcFulfillment(
      amount: BigNumberish,
      totalOrder: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calcNewReserve(
      seniorRedeem: BigNumberish,
      juniorRedeem: BigNumberish,
      seniorSupply: BigNumberish,
      juniorSupply: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calcSeniorAssetValue(
      seniorRedeem: BigNumberish,
      seniorSupply: BigNumberish,
      currSeniorAsset: BigNumberish,
      reserve_: BigNumberish,
      nav_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calcSeniorRatio(
      seniorAsset: BigNumberish,
      NAV: BigNumberish,
      reserve_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    challengeTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    checkRatioInRange(
      ratio: { value: BigNumberish },
      minRatio: { value: BigNumberish },
      maxRatio: { value: BigNumberish },
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    closeEpoch(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    currentEpoch(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    deny(
      usr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    depend(
      contractName: BytesLike,
      addr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    epochJuniorTokenPrice(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    epochNAV(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    epochReserve(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    epochSeniorAsset(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    epochSeniorTokenPrice(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    executeEpoch(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    file(
      name: BytesLike,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    gotFullValidSolution(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    juniorTranche(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lastEpochClosed(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lastEpochExecuted(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    minChallengePeriodEnd(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    minimumEpochTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    order(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    poolClosing(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rdiv(
      x: BigNumberish,
      y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rely(
      usr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    reserve(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rmul(
      x: BigNumberish,
      y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    safeAdd(
      x: BigNumberish,
      y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    safeDiv(
      x: BigNumberish,
      y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    safeMul(
      x: BigNumberish,
      y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    safeSub(
      x: BigNumberish,
      y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    scoreImprovement(
      newSeniorRatio_: { value: BigNumberish },
      newReserve_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    scoreRatioImprovement(
      newSeniorRatio: { value: BigNumberish },
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    scoreReserveImprovement(
      newReserve_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    scoreSolution(
      seniorRedeem: BigNumberish,
      juniorRedeem: BigNumberish,
      juniorSupply: BigNumberish,
      seniorSupply: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    seniorTranche(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    submissionPeriod(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    submitSolution(
      seniorRedeem: BigNumberish,
      juniorRedeem: BigNumberish,
      juniorSupply: BigNumberish,
      seniorSupply: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    validate(
      seniorRedeem: BigNumberish,
      juniorRedeem: BigNumberish,
      seniorSupply: BigNumberish,
      juniorSupply: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    validateCoreConstraints(
      currencyAvailable: BigNumberish,
      currencyOut: BigNumberish,
      seniorRedeem: BigNumberish,
      juniorRedeem: BigNumberish,
      seniorSupply: BigNumberish,
      juniorSupply: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    validatePoolConstraints(
      reserve_: BigNumberish,
      seniorAsset: BigNumberish,
      nav_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    wards(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    weightJuniorRedeem(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    weightJuniorSupply(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    weightSeniorRedeem(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    weightSeniorSupply(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
