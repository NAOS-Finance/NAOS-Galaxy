/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface NFTFeedLikeInterface extends ethers.utils.Interface {
  functions: {
    "borrow(uint256,uint256)": FunctionFragment;
    "ceiling(uint256)": FunctionFragment;
    "ceilingRatio(uint256)": FunctionFragment;
    "file(bytes32,bytes32,uint256)": FunctionFragment;
    "repay(uint256,uint256)": FunctionFragment;
    "threshold(uint256)": FunctionFragment;
    "thresholdRatio(uint256)": FunctionFragment;
    "update(bytes32,uint256,uint256)": FunctionFragment;
    "values(uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "borrow",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "ceiling",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "ceilingRatio",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "file",
    values: [BytesLike, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "repay",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "threshold",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "thresholdRatio",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "update",
    values: [BytesLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "values",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "borrow", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ceiling", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "ceilingRatio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "file", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "repay", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "threshold", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "thresholdRatio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "update", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "values", data: BytesLike): Result;

  events: {};
}

export class NFTFeedLike extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: NFTFeedLikeInterface;

  functions: {
    borrow(
      loan: BigNumberish,
      currencyAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    ceiling(
      loan: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    ceilingRatio(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    file(
      what: BytesLike,
      nftID_: BytesLike,
      maturityDate_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    repay(
      loan: BigNumberish,
      currencyAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    threshold(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    thresholdRatio(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "update(bytes32,uint256,uint256)"(
      nftID: BytesLike,
      value: BigNumberish,
      risk: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "update(bytes32,uint256)"(
      nftID: BytesLike,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    values(arg0: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  borrow(
    loan: BigNumberish,
    currencyAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  ceiling(loan: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  ceilingRatio(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  file(
    what: BytesLike,
    nftID_: BytesLike,
    maturityDate_: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  repay(
    loan: BigNumberish,
    currencyAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  threshold(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  thresholdRatio(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "update(bytes32,uint256,uint256)"(
    nftID: BytesLike,
    value: BigNumberish,
    risk: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "update(bytes32,uint256)"(
    nftID: BytesLike,
    value: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  values(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    borrow(
      loan: BigNumberish,
      currencyAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    ceiling(loan: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    ceilingRatio(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    file(
      what: BytesLike,
      nftID_: BytesLike,
      maturityDate_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    repay(
      loan: BigNumberish,
      currencyAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    threshold(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    thresholdRatio(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "update(bytes32,uint256,uint256)"(
      nftID: BytesLike,
      value: BigNumberish,
      risk: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "update(bytes32,uint256)"(
      nftID: BytesLike,
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    values(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    borrow(
      loan: BigNumberish,
      currencyAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    ceiling(loan: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    ceilingRatio(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    file(
      what: BytesLike,
      nftID_: BytesLike,
      maturityDate_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    repay(
      loan: BigNumberish,
      currencyAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    threshold(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    thresholdRatio(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "update(bytes32,uint256,uint256)"(
      nftID: BytesLike,
      value: BigNumberish,
      risk: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "update(bytes32,uint256)"(
      nftID: BytesLike,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    values(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    borrow(
      loan: BigNumberish,
      currencyAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    ceiling(
      loan: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ceilingRatio(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    file(
      what: BytesLike,
      nftID_: BytesLike,
      maturityDate_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    repay(
      loan: BigNumberish,
      currencyAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    threshold(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    thresholdRatio(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "update(bytes32,uint256,uint256)"(
      nftID: BytesLike,
      value: BigNumberish,
      risk: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "update(bytes32,uint256)"(
      nftID: BytesLike,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    values(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
