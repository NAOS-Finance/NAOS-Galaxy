/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface NAVFeedInterface extends ethers.utils.Interface {
  functions: {
    "NullDate()": FunctionFragment;
    "WRITE_OFF_PHASE_A()": FunctionFragment;
    "WRITE_OFF_PHASE_B()": FunctionFragment;
    "approximatedNAV()": FunctionFragment;
    "borrow(uint256,uint256)": FunctionFragment;
    "borrowEvent(uint256)": FunctionFragment;
    "borrowed(uint256)": FunctionFragment;
    "buckets(uint256)": FunctionFragment;
    "calcDiscount(uint256,uint256,uint256)": FunctionFragment;
    "calcFutureValue(uint256,uint256,uint256,uint256)": FunctionFragment;
    "calcTotalDiscount()": FunctionFragment;
    "calcUpdateNAV()": FunctionFragment;
    "ceiling(uint256)": FunctionFragment;
    "ceilingRatio(uint256)": FunctionFragment;
    "chargeInterest(uint256,uint256,uint256)": FunctionFragment;
    "compounding(uint256,uint256,uint256,uint256)": FunctionFragment;
    "currentCeiling(uint256)": FunctionFragment;
    "currentNAV()": FunctionFragment;
    "dateBucket(uint256)": FunctionFragment;
    "deny(address)": FunctionFragment;
    "depend(bytes32,address)": FunctionFragment;
    "discountRate()": FunctionFragment;
    "file(bytes32,bytes32,uint256)": FunctionFragment;
    "firstBucket()": FunctionFragment;
    "futureValue(bytes32)": FunctionFragment;
    "init()": FunctionFragment;
    "lastBucket()": FunctionFragment;
    "maturityDate(bytes32)": FunctionFragment;
    "nftID(uint256)": FunctionFragment;
    "nftValues(bytes32)": FunctionFragment;
    "rdiv(uint256,uint256)": FunctionFragment;
    "recoveryRatePD(uint256)": FunctionFragment;
    "rely(address)": FunctionFragment;
    "repay(uint256,uint256)": FunctionFragment;
    "risk(bytes32)": FunctionFragment;
    "rmul(uint256,uint256)": FunctionFragment;
    "rpow(uint256,uint256,uint256)": FunctionFragment;
    "safeAdd(uint256,uint256)": FunctionFragment;
    "safeDiv(uint256,uint256)": FunctionFragment;
    "safeMul(uint256,uint256)": FunctionFragment;
    "safeSub(uint256,uint256)": FunctionFragment;
    "threshold(uint256)": FunctionFragment;
    "thresholdRatio(uint256)": FunctionFragment;
    "toAmount(uint256,uint256)": FunctionFragment;
    "toPie(uint256,uint256)": FunctionFragment;
    "totalValue()": FunctionFragment;
    "uniqueDayTimestamp(uint256)": FunctionFragment;
    "unlockEvent(uint256)": FunctionFragment;
    "update(bytes32,uint256,uint256)": FunctionFragment;
    "wards(address)": FunctionFragment;
    "writeOffs(uint256)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "NullDate", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "WRITE_OFF_PHASE_A",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "WRITE_OFF_PHASE_B",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "approximatedNAV",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "borrow",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "borrowEvent",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "borrowed",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "buckets",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "calcDiscount",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "calcFutureValue",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "calcTotalDiscount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "calcUpdateNAV",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ceiling",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "ceilingRatio",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "chargeInterest",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "compounding",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "currentCeiling",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "currentNAV",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "dateBucket",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "deny", values: [string]): string;
  encodeFunctionData(
    functionFragment: "depend",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "discountRate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "file",
    values: [BytesLike, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "firstBucket",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "futureValue",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "init", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "lastBucket",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maturityDate",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "nftID", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "nftValues",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "rdiv",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "recoveryRatePD",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "rely", values: [string]): string;
  encodeFunctionData(
    functionFragment: "repay",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "risk", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "rmul",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "rpow",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "safeAdd",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "safeDiv",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "safeMul",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "safeSub",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "threshold",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "thresholdRatio",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "toAmount",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "toPie",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "totalValue",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "uniqueDayTimestamp",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "unlockEvent",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "update",
    values: [BytesLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "wards", values: [string]): string;
  encodeFunctionData(
    functionFragment: "writeOffs",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "NullDate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "WRITE_OFF_PHASE_A",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "WRITE_OFF_PHASE_B",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "approximatedNAV",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "borrow", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "borrowEvent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "borrowed", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "buckets", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "calcDiscount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calcFutureValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calcTotalDiscount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calcUpdateNAV",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "ceiling", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "ceilingRatio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "chargeInterest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "compounding",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentCeiling",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "currentNAV", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "dateBucket", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "deny", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "depend", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "discountRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "file", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "firstBucket",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "futureValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "init", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "lastBucket", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "maturityDate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "nftID", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "nftValues", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "rdiv", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "recoveryRatePD",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "rely", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "repay", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "risk", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "rmul", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "rpow", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "safeAdd", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "safeDiv", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "safeMul", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "safeSub", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "threshold", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "thresholdRatio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "toAmount", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "toPie", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "totalValue", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "uniqueDayTimestamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unlockEvent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "update", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "wards", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "writeOffs", data: BytesLike): Result;

  events: {
    "LogNote(bytes4,address,bytes32,bytes32,uint256,bytes)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "LogNote"): EventFragment;
}

export class NAVFeed extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: NAVFeedInterface;

  functions: {
    NullDate(overrides?: CallOverrides): Promise<[BigNumber]>;

    WRITE_OFF_PHASE_A(overrides?: CallOverrides): Promise<[BigNumber]>;

    WRITE_OFF_PHASE_B(overrides?: CallOverrides): Promise<[BigNumber]>;

    approximatedNAV(overrides?: CallOverrides): Promise<[BigNumber]>;

    borrow(
      loan: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    borrowEvent(
      loan: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    borrowed(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    buckets(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { value: BigNumber; next: BigNumber }>;

    calcDiscount(
      amount: BigNumberish,
      normalizedBlockTimestamp: BigNumberish,
      maturityDate_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { result: BigNumber }>;

    calcFutureValue(
      loan: BigNumberish,
      amount: BigNumberish,
      maturityDate_: BigNumberish,
      recoveryRatePD_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    calcTotalDiscount(overrides?: CallOverrides): Promise<[BigNumber]>;

    calcUpdateNAV(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    ceiling(
      loan: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    ceilingRatio(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    chargeInterest(
      interestBearingAmount: BigNumberish,
      ratePerSecond: BigNumberish,
      lastUpdated: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    compounding(
      chi: BigNumberish,
      ratePerSecond: BigNumberish,
      lastUpdated: BigNumberish,
      pie: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    currentCeiling(
      loan: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    currentNAV(overrides?: CallOverrides): Promise<[BigNumber]>;

    dateBucket(
      timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    deny(
      usr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    depend(
      contractName: BytesLike,
      addr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    discountRate(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { value: BigNumber }>;

    "file(bytes32,bytes32,uint256)"(
      name: BytesLike,
      nftID_: BytesLike,
      maturityDate_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "file(bytes32,uint256)"(
      name: BytesLike,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "file(bytes32,uint256,uint256,uint256,uint256)"(
      name: BytesLike,
      risk_: BigNumberish,
      thresholdRatio_: BigNumberish,
      ceilingRatio_: BigNumberish,
      rate_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "file(bytes32,uint256,uint256,uint256,uint256,uint256)"(
      name: BytesLike,
      risk_: BigNumberish,
      thresholdRatio_: BigNumberish,
      ceilingRatio_: BigNumberish,
      rate_: BigNumberish,
      recoveryRatePD_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    firstBucket(overrides?: CallOverrides): Promise<[BigNumber]>;

    futureValue(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    init(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    lastBucket(overrides?: CallOverrides): Promise<[BigNumber]>;

    maturityDate(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "nftID(uint256)"(
      loan: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "nftID(address,uint256)"(
      registry: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    nftValues(arg0: BytesLike, overrides?: CallOverrides): Promise<[BigNumber]>;

    rdiv(
      x: BigNumberish,
      y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { z: BigNumber }>;

    recoveryRatePD(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { value: BigNumber }>;

    rely(
      usr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    repay(
      loan: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    risk(arg0: BytesLike, overrides?: CallOverrides): Promise<[BigNumber]>;

    rmul(
      x: BigNumberish,
      y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { z: BigNumber }>;

    rpow(
      x: BigNumberish,
      n: BigNumberish,
      base: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { z: BigNumber }>;

    safeAdd(
      x: BigNumberish,
      y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { z: BigNumber }>;

    safeDiv(
      x: BigNumberish,
      y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { z: BigNumber }>;

    safeMul(
      x: BigNumberish,
      y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { z: BigNumber }>;

    safeSub(
      x: BigNumberish,
      y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { z: BigNumber }>;

    threshold(
      loan: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    thresholdRatio(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    toAmount(
      chi: BigNumberish,
      pie: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    toPie(
      chi: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    totalValue(overrides?: CallOverrides): Promise<[BigNumber]>;

    uniqueDayTimestamp(
      timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    unlockEvent(
      loan: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "update(bytes32,uint256,uint256)"(
      nftID_: BytesLike,
      value: BigNumberish,
      risk_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "update(bytes32,uint256)"(
      nftID_: BytesLike,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    wards(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    writeOffs(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, [BigNumber] & { value: BigNumber }] & {
        rateGroup: BigNumber;
        percentage: [BigNumber] & { value: BigNumber };
      }
    >;
  };

  NullDate(overrides?: CallOverrides): Promise<BigNumber>;

  WRITE_OFF_PHASE_A(overrides?: CallOverrides): Promise<BigNumber>;

  WRITE_OFF_PHASE_B(overrides?: CallOverrides): Promise<BigNumber>;

  approximatedNAV(overrides?: CallOverrides): Promise<BigNumber>;

  borrow(
    loan: BigNumberish,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  borrowEvent(
    loan: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  borrowed(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  buckets(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber] & { value: BigNumber; next: BigNumber }>;

  calcDiscount(
    amount: BigNumberish,
    normalizedBlockTimestamp: BigNumberish,
    maturityDate_: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  calcFutureValue(
    loan: BigNumberish,
    amount: BigNumberish,
    maturityDate_: BigNumberish,
    recoveryRatePD_: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  calcTotalDiscount(overrides?: CallOverrides): Promise<BigNumber>;

  calcUpdateNAV(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  ceiling(loan: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  ceilingRatio(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  chargeInterest(
    interestBearingAmount: BigNumberish,
    ratePerSecond: BigNumberish,
    lastUpdated: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  compounding(
    chi: BigNumberish,
    ratePerSecond: BigNumberish,
    lastUpdated: BigNumberish,
    pie: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber]>;

  currentCeiling(
    loan: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  currentNAV(overrides?: CallOverrides): Promise<BigNumber>;

  dateBucket(
    timestamp: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  deny(
    usr: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  depend(
    contractName: BytesLike,
    addr: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  discountRate(overrides?: CallOverrides): Promise<BigNumber>;

  "file(bytes32,bytes32,uint256)"(
    name: BytesLike,
    nftID_: BytesLike,
    maturityDate_: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "file(bytes32,uint256)"(
    name: BytesLike,
    value: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "file(bytes32,uint256,uint256,uint256,uint256)"(
    name: BytesLike,
    risk_: BigNumberish,
    thresholdRatio_: BigNumberish,
    ceilingRatio_: BigNumberish,
    rate_: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "file(bytes32,uint256,uint256,uint256,uint256,uint256)"(
    name: BytesLike,
    risk_: BigNumberish,
    thresholdRatio_: BigNumberish,
    ceilingRatio_: BigNumberish,
    rate_: BigNumberish,
    recoveryRatePD_: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  firstBucket(overrides?: CallOverrides): Promise<BigNumber>;

  futureValue(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

  init(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  lastBucket(overrides?: CallOverrides): Promise<BigNumber>;

  maturityDate(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

  "nftID(uint256)"(
    loan: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  "nftID(address,uint256)"(
    registry: string,
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  nftValues(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

  rdiv(
    x: BigNumberish,
    y: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  recoveryRatePD(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  rely(
    usr: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  repay(
    loan: BigNumberish,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  risk(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

  rmul(
    x: BigNumberish,
    y: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  rpow(
    x: BigNumberish,
    n: BigNumberish,
    base: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  safeAdd(
    x: BigNumberish,
    y: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  safeDiv(
    x: BigNumberish,
    y: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  safeMul(
    x: BigNumberish,
    y: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  safeSub(
    x: BigNumberish,
    y: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  threshold(loan: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  thresholdRatio(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  toAmount(
    chi: BigNumberish,
    pie: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  toPie(
    chi: BigNumberish,
    amount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  totalValue(overrides?: CallOverrides): Promise<BigNumber>;

  uniqueDayTimestamp(
    timestamp: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  unlockEvent(
    loan: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "update(bytes32,uint256,uint256)"(
    nftID_: BytesLike,
    value: BigNumberish,
    risk_: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "update(bytes32,uint256)"(
    nftID_: BytesLike,
    value: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  wards(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  writeOffs(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, [BigNumber] & { value: BigNumber }] & {
      rateGroup: BigNumber;
      percentage: [BigNumber] & { value: BigNumber };
    }
  >;

  callStatic: {
    NullDate(overrides?: CallOverrides): Promise<BigNumber>;

    WRITE_OFF_PHASE_A(overrides?: CallOverrides): Promise<BigNumber>;

    WRITE_OFF_PHASE_B(overrides?: CallOverrides): Promise<BigNumber>;

    approximatedNAV(overrides?: CallOverrides): Promise<BigNumber>;

    borrow(
      loan: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    borrowEvent(loan: BigNumberish, overrides?: CallOverrides): Promise<void>;

    borrowed(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    buckets(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { value: BigNumber; next: BigNumber }>;

    calcDiscount(
      amount: BigNumberish,
      normalizedBlockTimestamp: BigNumberish,
      maturityDate_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calcFutureValue(
      loan: BigNumberish,
      amount: BigNumberish,
      maturityDate_: BigNumberish,
      recoveryRatePD_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calcTotalDiscount(overrides?: CallOverrides): Promise<BigNumber>;

    calcUpdateNAV(overrides?: CallOverrides): Promise<BigNumber>;

    ceiling(loan: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    ceilingRatio(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    chargeInterest(
      interestBearingAmount: BigNumberish,
      ratePerSecond: BigNumberish,
      lastUpdated: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    compounding(
      chi: BigNumberish,
      ratePerSecond: BigNumberish,
      lastUpdated: BigNumberish,
      pie: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    currentCeiling(
      loan: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    currentNAV(overrides?: CallOverrides): Promise<BigNumber>;

    dateBucket(
      timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    deny(usr: string, overrides?: CallOverrides): Promise<void>;

    depend(
      contractName: BytesLike,
      addr: string,
      overrides?: CallOverrides
    ): Promise<void>;

    discountRate(overrides?: CallOverrides): Promise<BigNumber>;

    "file(bytes32,bytes32,uint256)"(
      name: BytesLike,
      nftID_: BytesLike,
      maturityDate_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "file(bytes32,uint256)"(
      name: BytesLike,
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "file(bytes32,uint256,uint256,uint256,uint256)"(
      name: BytesLike,
      risk_: BigNumberish,
      thresholdRatio_: BigNumberish,
      ceilingRatio_: BigNumberish,
      rate_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "file(bytes32,uint256,uint256,uint256,uint256,uint256)"(
      name: BytesLike,
      risk_: BigNumberish,
      thresholdRatio_: BigNumberish,
      ceilingRatio_: BigNumberish,
      rate_: BigNumberish,
      recoveryRatePD_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    firstBucket(overrides?: CallOverrides): Promise<BigNumber>;

    futureValue(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    init(overrides?: CallOverrides): Promise<void>;

    lastBucket(overrides?: CallOverrides): Promise<BigNumber>;

    maturityDate(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "nftID(uint256)"(
      loan: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "nftID(address,uint256)"(
      registry: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    nftValues(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    rdiv(
      x: BigNumberish,
      y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    recoveryRatePD(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rely(usr: string, overrides?: CallOverrides): Promise<void>;

    repay(
      loan: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    risk(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    rmul(
      x: BigNumberish,
      y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rpow(
      x: BigNumberish,
      n: BigNumberish,
      base: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    safeAdd(
      x: BigNumberish,
      y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    safeDiv(
      x: BigNumberish,
      y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    safeMul(
      x: BigNumberish,
      y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    safeSub(
      x: BigNumberish,
      y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    threshold(
      loan: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    thresholdRatio(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    toAmount(
      chi: BigNumberish,
      pie: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    toPie(
      chi: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalValue(overrides?: CallOverrides): Promise<BigNumber>;

    uniqueDayTimestamp(
      timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    unlockEvent(loan: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "update(bytes32,uint256,uint256)"(
      nftID_: BytesLike,
      value: BigNumberish,
      risk_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "update(bytes32,uint256)"(
      nftID_: BytesLike,
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    wards(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    writeOffs(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, [BigNumber] & { value: BigNumber }] & {
        rateGroup: BigNumber;
        percentage: [BigNumber] & { value: BigNumber };
      }
    >;
  };

  filters: {
    LogNote(
      sig?: BytesLike | null,
      guy?: string | null,
      foo?: BytesLike | null,
      bar?: BytesLike | null,
      wad?: null,
      fax?: null
    ): TypedEventFilter<
      [string, string, string, string, BigNumber, string],
      {
        sig: string;
        guy: string;
        foo: string;
        bar: string;
        wad: BigNumber;
        fax: string;
      }
    >;
  };

  estimateGas: {
    NullDate(overrides?: CallOverrides): Promise<BigNumber>;

    WRITE_OFF_PHASE_A(overrides?: CallOverrides): Promise<BigNumber>;

    WRITE_OFF_PHASE_B(overrides?: CallOverrides): Promise<BigNumber>;

    approximatedNAV(overrides?: CallOverrides): Promise<BigNumber>;

    borrow(
      loan: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    borrowEvent(
      loan: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    borrowed(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    buckets(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    calcDiscount(
      amount: BigNumberish,
      normalizedBlockTimestamp: BigNumberish,
      maturityDate_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calcFutureValue(
      loan: BigNumberish,
      amount: BigNumberish,
      maturityDate_: BigNumberish,
      recoveryRatePD_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    calcTotalDiscount(overrides?: CallOverrides): Promise<BigNumber>;

    calcUpdateNAV(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    ceiling(loan: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    ceilingRatio(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    chargeInterest(
      interestBearingAmount: BigNumberish,
      ratePerSecond: BigNumberish,
      lastUpdated: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    compounding(
      chi: BigNumberish,
      ratePerSecond: BigNumberish,
      lastUpdated: BigNumberish,
      pie: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    currentCeiling(
      loan: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    currentNAV(overrides?: CallOverrides): Promise<BigNumber>;

    dateBucket(
      timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    deny(
      usr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    depend(
      contractName: BytesLike,
      addr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    discountRate(overrides?: CallOverrides): Promise<BigNumber>;

    "file(bytes32,bytes32,uint256)"(
      name: BytesLike,
      nftID_: BytesLike,
      maturityDate_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "file(bytes32,uint256)"(
      name: BytesLike,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "file(bytes32,uint256,uint256,uint256,uint256)"(
      name: BytesLike,
      risk_: BigNumberish,
      thresholdRatio_: BigNumberish,
      ceilingRatio_: BigNumberish,
      rate_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "file(bytes32,uint256,uint256,uint256,uint256,uint256)"(
      name: BytesLike,
      risk_: BigNumberish,
      thresholdRatio_: BigNumberish,
      ceilingRatio_: BigNumberish,
      rate_: BigNumberish,
      recoveryRatePD_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    firstBucket(overrides?: CallOverrides): Promise<BigNumber>;

    futureValue(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    init(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    lastBucket(overrides?: CallOverrides): Promise<BigNumber>;

    maturityDate(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "nftID(uint256)"(
      loan: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "nftID(address,uint256)"(
      registry: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    nftValues(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    rdiv(
      x: BigNumberish,
      y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    recoveryRatePD(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rely(
      usr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    repay(
      loan: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    risk(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    rmul(
      x: BigNumberish,
      y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rpow(
      x: BigNumberish,
      n: BigNumberish,
      base: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    safeAdd(
      x: BigNumberish,
      y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    safeDiv(
      x: BigNumberish,
      y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    safeMul(
      x: BigNumberish,
      y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    safeSub(
      x: BigNumberish,
      y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    threshold(
      loan: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    thresholdRatio(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    toAmount(
      chi: BigNumberish,
      pie: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    toPie(
      chi: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalValue(overrides?: CallOverrides): Promise<BigNumber>;

    uniqueDayTimestamp(
      timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    unlockEvent(
      loan: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "update(bytes32,uint256,uint256)"(
      nftID_: BytesLike,
      value: BigNumberish,
      risk_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "update(bytes32,uint256)"(
      nftID_: BytesLike,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    wards(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    writeOffs(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    NullDate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    WRITE_OFF_PHASE_A(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    WRITE_OFF_PHASE_B(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    approximatedNAV(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    borrow(
      loan: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    borrowEvent(
      loan: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    borrowed(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    buckets(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calcDiscount(
      amount: BigNumberish,
      normalizedBlockTimestamp: BigNumberish,
      maturityDate_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calcFutureValue(
      loan: BigNumberish,
      amount: BigNumberish,
      maturityDate_: BigNumberish,
      recoveryRatePD_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    calcTotalDiscount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    calcUpdateNAV(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    ceiling(
      loan: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ceilingRatio(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    chargeInterest(
      interestBearingAmount: BigNumberish,
      ratePerSecond: BigNumberish,
      lastUpdated: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    compounding(
      chi: BigNumberish,
      ratePerSecond: BigNumberish,
      lastUpdated: BigNumberish,
      pie: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    currentCeiling(
      loan: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    currentNAV(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    dateBucket(
      timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    deny(
      usr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    depend(
      contractName: BytesLike,
      addr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    discountRate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "file(bytes32,bytes32,uint256)"(
      name: BytesLike,
      nftID_: BytesLike,
      maturityDate_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "file(bytes32,uint256)"(
      name: BytesLike,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "file(bytes32,uint256,uint256,uint256,uint256)"(
      name: BytesLike,
      risk_: BigNumberish,
      thresholdRatio_: BigNumberish,
      ceilingRatio_: BigNumberish,
      rate_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "file(bytes32,uint256,uint256,uint256,uint256,uint256)"(
      name: BytesLike,
      risk_: BigNumberish,
      thresholdRatio_: BigNumberish,
      ceilingRatio_: BigNumberish,
      rate_: BigNumberish,
      recoveryRatePD_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    firstBucket(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    futureValue(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    init(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    lastBucket(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    maturityDate(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "nftID(uint256)"(
      loan: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "nftID(address,uint256)"(
      registry: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    nftValues(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rdiv(
      x: BigNumberish,
      y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    recoveryRatePD(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rely(
      usr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    repay(
      loan: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    risk(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rmul(
      x: BigNumberish,
      y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rpow(
      x: BigNumberish,
      n: BigNumberish,
      base: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    safeAdd(
      x: BigNumberish,
      y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    safeDiv(
      x: BigNumberish,
      y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    safeMul(
      x: BigNumberish,
      y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    safeSub(
      x: BigNumberish,
      y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    threshold(
      loan: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    thresholdRatio(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    toAmount(
      chi: BigNumberish,
      pie: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    toPie(
      chi: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalValue(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    uniqueDayTimestamp(
      timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    unlockEvent(
      loan: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "update(bytes32,uint256,uint256)"(
      nftID_: BytesLike,
      value: BigNumberish,
      risk_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "update(bytes32,uint256)"(
      nftID_: BytesLike,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    wards(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    writeOffs(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
