/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface ShelfMockInterface extends ethers.utils.Interface {
  functions: {
    "balanceRequest()": FunctionFragment;
    "calls(bytes32)": FunctionFragment;
    "claim(uint256,address)": FunctionFragment;
    "doApprove(address,address,uint256)": FunctionFragment;
    "file(uint256,address,uint256)": FunctionFragment;
    "lock(uint256,address)": FunctionFragment;
    "nftlookup(bytes32)": FunctionFragment;
    "recover(uint256,address,uint256)": FunctionFragment;
    "setFail(bytes32,bool)": FunctionFragment;
    "setReturn(bytes32,bool)": FunctionFragment;
    "shelf(uint256)": FunctionFragment;
    "token(uint256)": FunctionFragment;
    "unlock(uint256,address)": FunctionFragment;
    "values_address(bytes32)": FunctionFragment;
    "values_address_return(bytes32)": FunctionFragment;
    "values_bool_return(bytes32)": FunctionFragment;
    "values_bytes32(bytes32)": FunctionFragment;
    "values_return(bytes32)": FunctionFragment;
    "values_uint(bytes32)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "balanceRequest",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "calls", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "claim",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "doApprove",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "file",
    values: [BigNumberish, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "lock",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "nftlookup",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "recover",
    values: [BigNumberish, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setFail",
    values: [BytesLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setReturn",
    values: [BytesLike, boolean]
  ): string;
  encodeFunctionData(functionFragment: "shelf", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "token", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "unlock",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "values_address",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "values_address_return",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "values_bool_return",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "values_bytes32",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "values_return",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "values_uint",
    values: [BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "balanceRequest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "calls", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "claim", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "doApprove", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "file", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "lock", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "nftlookup", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "recover", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setFail", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setReturn", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "shelf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "token", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "unlock", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "values_address",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "values_address_return",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "values_bool_return",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "values_bytes32",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "values_return",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "values_uint",
    data: BytesLike
  ): Result;

  events: {};
}

export class ShelfMock extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: ShelfMockInterface;

  functions: {
    balanceRequest(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    calls(arg0: BytesLike, overrides?: CallOverrides): Promise<[BigNumber]>;

    claim(
      loan: BigNumberish,
      usr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    doApprove(
      currency_: string,
      recepeint: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    file(
      loan: BigNumberish,
      registry: string,
      nft: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    lock(
      loan: BigNumberish,
      usr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    nftlookup(
      nftID: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    recover(
      loan: BigNumberish,
      usr: string,
      currencyAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setFail(
      name: BytesLike,
      flag: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setReturn(bytes32,bool)"(
      name: BytesLike,
      returnValue: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setReturn(bytes32,bool,uint256)"(
      name: BytesLike,
      flag: boolean,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setReturn(bytes32,address)"(
      name: BytesLike,
      returnValue: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setReturn(bytes32,uint256)"(
      name: BytesLike,
      returnValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setReturn(bytes32,address,uint256)"(
      name: BytesLike,
      addr: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    shelf(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber]>;

    token(
      loan: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    unlock(
      loan: BigNumberish,
      usr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    values_address(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    values_address_return(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    values_bool_return(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    values_bytes32(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    values_return(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    values_uint(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;
  };

  balanceRequest(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  calls(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

  claim(
    loan: BigNumberish,
    usr: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  doApprove(
    currency_: string,
    recepeint: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  file(
    loan: BigNumberish,
    registry: string,
    nft: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  lock(
    loan: BigNumberish,
    usr: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  nftlookup(
    nftID: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  recover(
    loan: BigNumberish,
    usr: string,
    currencyAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setFail(
    name: BytesLike,
    flag: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setReturn(bytes32,bool)"(
    name: BytesLike,
    returnValue: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setReturn(bytes32,bool,uint256)"(
    name: BytesLike,
    flag: boolean,
    value: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setReturn(bytes32,address)"(
    name: BytesLike,
    returnValue: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setReturn(bytes32,uint256)"(
    name: BytesLike,
    returnValue: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setReturn(bytes32,address,uint256)"(
    name: BytesLike,
    addr: string,
    value: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  shelf(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[string, BigNumber]>;

  token(
    loan: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  unlock(
    loan: BigNumberish,
    usr: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  values_address(arg0: BytesLike, overrides?: CallOverrides): Promise<string>;

  values_address_return(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  values_bool_return(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  values_bytes32(arg0: BytesLike, overrides?: CallOverrides): Promise<string>;

  values_return(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

  values_uint(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    balanceRequest(overrides?: CallOverrides): Promise<[boolean, BigNumber]>;

    calls(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    claim(
      loan: BigNumberish,
      usr: string,
      overrides?: CallOverrides
    ): Promise<void>;

    doApprove(
      currency_: string,
      recepeint: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    file(
      loan: BigNumberish,
      registry: string,
      nft: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    lock(
      loan: BigNumberish,
      usr: string,
      overrides?: CallOverrides
    ): Promise<void>;

    nftlookup(nftID: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    recover(
      loan: BigNumberish,
      usr: string,
      currencyAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setFail(
      name: BytesLike,
      flag: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "setReturn(bytes32,bool)"(
      name: BytesLike,
      returnValue: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "setReturn(bytes32,bool,uint256)"(
      name: BytesLike,
      flag: boolean,
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setReturn(bytes32,address)"(
      name: BytesLike,
      returnValue: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setReturn(bytes32,uint256)"(
      name: BytesLike,
      returnValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setReturn(bytes32,address,uint256)"(
      name: BytesLike,
      addr: string,
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    shelf(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber]>;

    token(
      loan: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber]>;

    unlock(
      loan: BigNumberish,
      usr: string,
      overrides?: CallOverrides
    ): Promise<void>;

    values_address(arg0: BytesLike, overrides?: CallOverrides): Promise<string>;

    values_address_return(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    values_bool_return(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    values_bytes32(arg0: BytesLike, overrides?: CallOverrides): Promise<string>;

    values_return(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    values_uint(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    balanceRequest(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    calls(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    claim(
      loan: BigNumberish,
      usr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    doApprove(
      currency_: string,
      recepeint: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    file(
      loan: BigNumberish,
      registry: string,
      nft: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    lock(
      loan: BigNumberish,
      usr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    nftlookup(
      nftID: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    recover(
      loan: BigNumberish,
      usr: string,
      currencyAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setFail(
      name: BytesLike,
      flag: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setReturn(bytes32,bool)"(
      name: BytesLike,
      returnValue: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setReturn(bytes32,bool,uint256)"(
      name: BytesLike,
      flag: boolean,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setReturn(bytes32,address)"(
      name: BytesLike,
      returnValue: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setReturn(bytes32,uint256)"(
      name: BytesLike,
      returnValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setReturn(bytes32,address,uint256)"(
      name: BytesLike,
      addr: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    shelf(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    token(
      loan: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    unlock(
      loan: BigNumberish,
      usr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    values_address(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    values_address_return(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    values_bool_return(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    values_bytes32(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    values_return(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    values_uint(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    balanceRequest(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    calls(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    claim(
      loan: BigNumberish,
      usr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    doApprove(
      currency_: string,
      recepeint: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    file(
      loan: BigNumberish,
      registry: string,
      nft: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    lock(
      loan: BigNumberish,
      usr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    nftlookup(
      nftID: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    recover(
      loan: BigNumberish,
      usr: string,
      currencyAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setFail(
      name: BytesLike,
      flag: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setReturn(bytes32,bool)"(
      name: BytesLike,
      returnValue: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setReturn(bytes32,bool,uint256)"(
      name: BytesLike,
      flag: boolean,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setReturn(bytes32,address)"(
      name: BytesLike,
      returnValue: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setReturn(bytes32,uint256)"(
      name: BytesLike,
      returnValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setReturn(bytes32,address,uint256)"(
      name: BytesLike,
      addr: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    shelf(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    token(
      loan: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    unlock(
      loan: BigNumberish,
      usr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    values_address(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    values_address_return(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    values_bool_return(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    values_bytes32(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    values_return(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    values_uint(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
