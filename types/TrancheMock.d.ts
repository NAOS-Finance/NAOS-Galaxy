/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface TrancheMockInterface extends ethers.utils.Interface {
  functions: {
    "IS_TEST()": FunctionFragment;
    "calls(bytes32)": FunctionFragment;
    "closeEpoch()": FunctionFragment;
    "deny(address)": FunctionFragment;
    "disburse(address)": FunctionFragment;
    "epochUpdate(uint256,uint256,uint256,uint256,uint256,uint256)": FunctionFragment;
    "failed()": FunctionFragment;
    "redeemOrder(address,uint256)": FunctionFragment;
    "rely(address)": FunctionFragment;
    "setEpochReturn(uint256,uint256)": FunctionFragment;
    "setFail(bytes32,bool)": FunctionFragment;
    "setReturn(bytes32,bool)": FunctionFragment;
    "supplyOrder(address,uint256)": FunctionFragment;
    "tokenSupply()": FunctionFragment;
    "values_address(bytes32)": FunctionFragment;
    "values_address_return(bytes32)": FunctionFragment;
    "values_bool_return(bytes32)": FunctionFragment;
    "values_bytes32(bytes32)": FunctionFragment;
    "values_return(bytes32)": FunctionFragment;
    "values_uint(bytes32)": FunctionFragment;
    "wards(address)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "IS_TEST", values?: undefined): string;
  encodeFunctionData(functionFragment: "calls", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "closeEpoch",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "deny", values: [string]): string;
  encodeFunctionData(functionFragment: "disburse", values: [string]): string;
  encodeFunctionData(
    functionFragment: "epochUpdate",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(functionFragment: "failed", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "redeemOrder",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "rely", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setEpochReturn",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setFail",
    values: [BytesLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setReturn",
    values: [BytesLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "supplyOrder",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "values_address",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "values_address_return",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "values_bool_return",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "values_bytes32",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "values_return",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "values_uint",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "wards", values: [string]): string;

  decodeFunctionResult(functionFragment: "IS_TEST", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "calls", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "closeEpoch", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "deny", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "disburse", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "epochUpdate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "failed", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "redeemOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "rely", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setEpochReturn",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setFail", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setReturn", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supplyOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "values_address",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "values_address_return",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "values_bool_return",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "values_bytes32",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "values_return",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "values_uint",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "wards", data: BytesLike): Result;

  events: {
    "LogNote(bytes4,address,bytes32,bytes32,uint256,bytes)": EventFragment;
    "eventListener(address,bool)": EventFragment;
    "log_bytes32(bytes32)": EventFragment;
    "log_named_address(bytes32,address)": EventFragment;
    "log_named_bytes32(bytes32,bytes32)": EventFragment;
    "log_named_decimal_int(bytes32,int256,uint256)": EventFragment;
    "log_named_decimal_uint(bytes32,uint256,uint256)": EventFragment;
    "log_named_int(bytes32,int256)": EventFragment;
    "log_named_string(bytes32,string)": EventFragment;
    "log_named_uint(bytes32,uint256)": EventFragment;
    "logs(bytes)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "LogNote"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "eventListener"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log_bytes32"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log_named_address"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log_named_bytes32"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log_named_decimal_int"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log_named_decimal_uint"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log_named_int"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log_named_string"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log_named_uint"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "logs"): EventFragment;
}

export type LogNoteEvent = TypedEvent<
  [string, string, string, string, BigNumber, string] & {
    sig: string;
    guy: string;
    foo: string;
    bar: string;
    wad: BigNumber;
    fax: string;
  }
>;

export type eventListenerEvent = TypedEvent<
  [string, boolean] & { target: string; exact: boolean }
>;

export type log_bytes32Event = TypedEvent<[string] & { arg0: string }>;

export type log_named_addressEvent = TypedEvent<
  [string, string] & { key: string; val: string }
>;

export type log_named_bytes32Event = TypedEvent<
  [string, string] & { key: string; val: string }
>;

export type log_named_decimal_intEvent = TypedEvent<
  [string, BigNumber, BigNumber] & {
    key: string;
    val: BigNumber;
    decimals: BigNumber;
  }
>;

export type log_named_decimal_uintEvent = TypedEvent<
  [string, BigNumber, BigNumber] & {
    key: string;
    val: BigNumber;
    decimals: BigNumber;
  }
>;

export type log_named_intEvent = TypedEvent<
  [string, BigNumber] & { key: string; val: BigNumber }
>;

export type log_named_stringEvent = TypedEvent<
  [string, string] & { key: string; val: string }
>;

export type log_named_uintEvent = TypedEvent<
  [string, BigNumber] & { key: string; val: BigNumber }
>;

export type logsEvent = TypedEvent<[string] & { arg0: string }>;

export class TrancheMock extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: TrancheMockInterface;

  functions: {
    IS_TEST(overrides?: CallOverrides): Promise<[boolean]>;

    calls(arg0: BytesLike, overrides?: CallOverrides): Promise<[BigNumber]>;

    closeEpoch(overrides?: CallOverrides): Promise<[BigNumber, BigNumber]>;

    deny(
      usr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "disburse(address)"(
      usr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "disburse(address,uint256)"(
      usr: string,
      endEpoch: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    epochUpdate(
      epochID: BigNumberish,
      supplyFulfillment_: BigNumberish,
      redeemFulfillment_: BigNumberish,
      tokenPrice_: BigNumberish,
      epochSupplyCurrency: BigNumberish,
      epochRedeemCurrency: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    failed(overrides?: CallOverrides): Promise<[boolean]>;

    redeemOrder(
      usr: string,
      newRedeemAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    rely(
      usr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setEpochReturn(
      totalSupply_: BigNumberish,
      totalRedeem_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setFail(
      name: BytesLike,
      flag: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setReturn(bytes32,bool)"(
      name: BytesLike,
      returnValue: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setReturn(bytes32,bool,uint256)"(
      name: BytesLike,
      flag: boolean,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setReturn(bytes32,address)"(
      name: BytesLike,
      returnValue: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setReturn(bytes32,uint256)"(
      name: BytesLike,
      returnValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setReturn(bytes32,address,uint256)"(
      name: BytesLike,
      addr: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    supplyOrder(
      usr: string,
      newSupplyAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    tokenSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    values_address(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    values_address_return(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    values_bool_return(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    values_bytes32(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    values_return(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    values_uint(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    wards(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  IS_TEST(overrides?: CallOverrides): Promise<boolean>;

  calls(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

  closeEpoch(overrides?: CallOverrides): Promise<[BigNumber, BigNumber]>;

  deny(
    usr: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "disburse(address)"(
    usr: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "disburse(address,uint256)"(
    usr: string,
    endEpoch: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  epochUpdate(
    epochID: BigNumberish,
    supplyFulfillment_: BigNumberish,
    redeemFulfillment_: BigNumberish,
    tokenPrice_: BigNumberish,
    epochSupplyCurrency: BigNumberish,
    epochRedeemCurrency: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  failed(overrides?: CallOverrides): Promise<boolean>;

  redeemOrder(
    usr: string,
    newRedeemAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  rely(
    usr: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setEpochReturn(
    totalSupply_: BigNumberish,
    totalRedeem_: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setFail(
    name: BytesLike,
    flag: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setReturn(bytes32,bool)"(
    name: BytesLike,
    returnValue: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setReturn(bytes32,bool,uint256)"(
    name: BytesLike,
    flag: boolean,
    value: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setReturn(bytes32,address)"(
    name: BytesLike,
    returnValue: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setReturn(bytes32,uint256)"(
    name: BytesLike,
    returnValue: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setReturn(bytes32,address,uint256)"(
    name: BytesLike,
    addr: string,
    value: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  supplyOrder(
    usr: string,
    newSupplyAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  tokenSupply(overrides?: CallOverrides): Promise<BigNumber>;

  values_address(arg0: BytesLike, overrides?: CallOverrides): Promise<string>;

  values_address_return(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  values_bool_return(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  values_bytes32(arg0: BytesLike, overrides?: CallOverrides): Promise<string>;

  values_return(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

  values_uint(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

  wards(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    IS_TEST(overrides?: CallOverrides): Promise<boolean>;

    calls(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    closeEpoch(overrides?: CallOverrides): Promise<[BigNumber, BigNumber]>;

    deny(usr: string, overrides?: CallOverrides): Promise<void>;

    "disburse(address)"(
      usr: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, BigNumber, BigNumber]>;

    "disburse(address,uint256)"(
      usr: string,
      endEpoch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, BigNumber, BigNumber]>;

    epochUpdate(
      epochID: BigNumberish,
      supplyFulfillment_: BigNumberish,
      redeemFulfillment_: BigNumberish,
      tokenPrice_: BigNumberish,
      epochSupplyCurrency: BigNumberish,
      epochRedeemCurrency: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    failed(overrides?: CallOverrides): Promise<boolean>;

    redeemOrder(
      usr: string,
      newRedeemAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    rely(usr: string, overrides?: CallOverrides): Promise<void>;

    setEpochReturn(
      totalSupply_: BigNumberish,
      totalRedeem_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setFail(
      name: BytesLike,
      flag: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "setReturn(bytes32,bool)"(
      name: BytesLike,
      returnValue: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "setReturn(bytes32,bool,uint256)"(
      name: BytesLike,
      flag: boolean,
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setReturn(bytes32,address)"(
      name: BytesLike,
      returnValue: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setReturn(bytes32,uint256)"(
      name: BytesLike,
      returnValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setReturn(bytes32,address,uint256)"(
      name: BytesLike,
      addr: string,
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    supplyOrder(
      usr: string,
      newSupplyAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    tokenSupply(overrides?: CallOverrides): Promise<BigNumber>;

    values_address(arg0: BytesLike, overrides?: CallOverrides): Promise<string>;

    values_address_return(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    values_bool_return(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    values_bytes32(arg0: BytesLike, overrides?: CallOverrides): Promise<string>;

    values_return(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    values_uint(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    wards(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    "LogNote(bytes4,address,bytes32,bytes32,uint256,bytes)"(
      sig?: BytesLike | null,
      guy?: string | null,
      foo?: BytesLike | null,
      bar?: BytesLike | null,
      wad?: null,
      fax?: null
    ): TypedEventFilter<
      [string, string, string, string, BigNumber, string],
      {
        sig: string;
        guy: string;
        foo: string;
        bar: string;
        wad: BigNumber;
        fax: string;
      }
    >;

    LogNote(
      sig?: BytesLike | null,
      guy?: string | null,
      foo?: BytesLike | null,
      bar?: BytesLike | null,
      wad?: null,
      fax?: null
    ): TypedEventFilter<
      [string, string, string, string, BigNumber, string],
      {
        sig: string;
        guy: string;
        foo: string;
        bar: string;
        wad: BigNumber;
        fax: string;
      }
    >;

    "eventListener(address,bool)"(
      target?: null,
      exact?: null
    ): TypedEventFilter<[string, boolean], { target: string; exact: boolean }>;

    eventListener(
      target?: null,
      exact?: null
    ): TypedEventFilter<[string, boolean], { target: string; exact: boolean }>;

    "log_bytes32(bytes32)"(
      undefined?: null
    ): TypedEventFilter<[string], { arg0: string }>;

    log_bytes32(undefined?: null): TypedEventFilter<[string], { arg0: string }>;

    "log_named_address(bytes32,address)"(
      key?: null,
      val?: null
    ): TypedEventFilter<[string, string], { key: string; val: string }>;

    log_named_address(
      key?: null,
      val?: null
    ): TypedEventFilter<[string, string], { key: string; val: string }>;

    "log_named_bytes32(bytes32,bytes32)"(
      key?: null,
      val?: null
    ): TypedEventFilter<[string, string], { key: string; val: string }>;

    log_named_bytes32(
      key?: null,
      val?: null
    ): TypedEventFilter<[string, string], { key: string; val: string }>;

    "log_named_decimal_int(bytes32,int256,uint256)"(
      key?: null,
      val?: null,
      decimals?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { key: string; val: BigNumber; decimals: BigNumber }
    >;

    log_named_decimal_int(
      key?: null,
      val?: null,
      decimals?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { key: string; val: BigNumber; decimals: BigNumber }
    >;

    "log_named_decimal_uint(bytes32,uint256,uint256)"(
      key?: null,
      val?: null,
      decimals?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { key: string; val: BigNumber; decimals: BigNumber }
    >;

    log_named_decimal_uint(
      key?: null,
      val?: null,
      decimals?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { key: string; val: BigNumber; decimals: BigNumber }
    >;

    "log_named_int(bytes32,int256)"(
      key?: null,
      val?: null
    ): TypedEventFilter<[string, BigNumber], { key: string; val: BigNumber }>;

    log_named_int(
      key?: null,
      val?: null
    ): TypedEventFilter<[string, BigNumber], { key: string; val: BigNumber }>;

    "log_named_string(bytes32,string)"(
      key?: null,
      val?: null
    ): TypedEventFilter<[string, string], { key: string; val: string }>;

    log_named_string(
      key?: null,
      val?: null
    ): TypedEventFilter<[string, string], { key: string; val: string }>;

    "log_named_uint(bytes32,uint256)"(
      key?: null,
      val?: null
    ): TypedEventFilter<[string, BigNumber], { key: string; val: BigNumber }>;

    log_named_uint(
      key?: null,
      val?: null
    ): TypedEventFilter<[string, BigNumber], { key: string; val: BigNumber }>;

    "logs(bytes)"(
      undefined?: null
    ): TypedEventFilter<[string], { arg0: string }>;

    logs(undefined?: null): TypedEventFilter<[string], { arg0: string }>;
  };

  estimateGas: {
    IS_TEST(overrides?: CallOverrides): Promise<BigNumber>;

    calls(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    closeEpoch(overrides?: CallOverrides): Promise<BigNumber>;

    deny(
      usr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "disburse(address)"(
      usr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "disburse(address,uint256)"(
      usr: string,
      endEpoch: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    epochUpdate(
      epochID: BigNumberish,
      supplyFulfillment_: BigNumberish,
      redeemFulfillment_: BigNumberish,
      tokenPrice_: BigNumberish,
      epochSupplyCurrency: BigNumberish,
      epochRedeemCurrency: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    failed(overrides?: CallOverrides): Promise<BigNumber>;

    redeemOrder(
      usr: string,
      newRedeemAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    rely(
      usr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setEpochReturn(
      totalSupply_: BigNumberish,
      totalRedeem_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setFail(
      name: BytesLike,
      flag: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setReturn(bytes32,bool)"(
      name: BytesLike,
      returnValue: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setReturn(bytes32,bool,uint256)"(
      name: BytesLike,
      flag: boolean,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setReturn(bytes32,address)"(
      name: BytesLike,
      returnValue: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setReturn(bytes32,uint256)"(
      name: BytesLike,
      returnValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setReturn(bytes32,address,uint256)"(
      name: BytesLike,
      addr: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    supplyOrder(
      usr: string,
      newSupplyAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    tokenSupply(overrides?: CallOverrides): Promise<BigNumber>;

    values_address(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    values_address_return(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    values_bool_return(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    values_bytes32(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    values_return(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    values_uint(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    wards(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    IS_TEST(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    calls(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    closeEpoch(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    deny(
      usr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "disburse(address)"(
      usr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "disburse(address,uint256)"(
      usr: string,
      endEpoch: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    epochUpdate(
      epochID: BigNumberish,
      supplyFulfillment_: BigNumberish,
      redeemFulfillment_: BigNumberish,
      tokenPrice_: BigNumberish,
      epochSupplyCurrency: BigNumberish,
      epochRedeemCurrency: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    failed(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    redeemOrder(
      usr: string,
      newRedeemAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    rely(
      usr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setEpochReturn(
      totalSupply_: BigNumberish,
      totalRedeem_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setFail(
      name: BytesLike,
      flag: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setReturn(bytes32,bool)"(
      name: BytesLike,
      returnValue: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setReturn(bytes32,bool,uint256)"(
      name: BytesLike,
      flag: boolean,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setReturn(bytes32,address)"(
      name: BytesLike,
      returnValue: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setReturn(bytes32,uint256)"(
      name: BytesLike,
      returnValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setReturn(bytes32,address,uint256)"(
      name: BytesLike,
      addr: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    supplyOrder(
      usr: string,
      newSupplyAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    tokenSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    values_address(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    values_address_return(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    values_bool_return(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    values_bytes32(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    values_return(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    values_uint(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    wards(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
