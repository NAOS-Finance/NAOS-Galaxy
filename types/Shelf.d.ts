/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface ShelfInterface extends ethers.utils.Interface {
  functions: {
    "balance()": FunctionFragment;
    "balanceRequest()": FunctionFragment;
    "balances(uint256)": FunctionFragment;
    "borrow(uint256,uint256)": FunctionFragment;
    "ceiling()": FunctionFragment;
    "claim(uint256,address)": FunctionFragment;
    "close(uint256)": FunctionFragment;
    "currency()": FunctionFragment;
    "deny(address)": FunctionFragment;
    "depend(bytes32,address)": FunctionFragment;
    "distributor()": FunctionFragment;
    "issue(address,uint256)": FunctionFragment;
    "lender()": FunctionFragment;
    "lock(uint256)": FunctionFragment;
    "nftLocked(uint256)": FunctionFragment;
    "nftlookup(bytes32)": FunctionFragment;
    "pile()": FunctionFragment;
    "rdiv(uint256,uint256)": FunctionFragment;
    "recover(uint256,address,uint256)": FunctionFragment;
    "rely(address)": FunctionFragment;
    "repay(uint256,uint256)": FunctionFragment;
    "rmul(uint256,uint256)": FunctionFragment;
    "safeAdd(uint256,uint256)": FunctionFragment;
    "safeDiv(uint256,uint256)": FunctionFragment;
    "safeMul(uint256,uint256)": FunctionFragment;
    "safeSub(uint256,uint256)": FunctionFragment;
    "shelf(uint256)": FunctionFragment;
    "subscriber()": FunctionFragment;
    "title()": FunctionFragment;
    "token(uint256)": FunctionFragment;
    "unlock(uint256)": FunctionFragment;
    "wards(address)": FunctionFragment;
    "withdraw(uint256,uint256,address)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "balance", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "balanceRequest",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "balances",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "borrow",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "ceiling", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "claim",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(functionFragment: "close", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "currency", values?: undefined): string;
  encodeFunctionData(functionFragment: "deny", values: [string]): string;
  encodeFunctionData(
    functionFragment: "depend",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "distributor",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "issue",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "lender", values?: undefined): string;
  encodeFunctionData(functionFragment: "lock", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "nftLocked",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "nftlookup",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "pile", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "rdiv",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "recover",
    values: [BigNumberish, string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "rely", values: [string]): string;
  encodeFunctionData(
    functionFragment: "repay",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "rmul",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "safeAdd",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "safeDiv",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "safeMul",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "safeSub",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "shelf", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "subscriber",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "title", values?: undefined): string;
  encodeFunctionData(functionFragment: "token", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "unlock",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "wards", values: [string]): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [BigNumberish, BigNumberish, string]
  ): string;

  decodeFunctionResult(functionFragment: "balance", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "balanceRequest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "balances", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "borrow", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ceiling", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "claim", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "close", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "currency", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "deny", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "depend", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "distributor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "issue", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "lender", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "lock", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "nftLocked", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "nftlookup", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pile", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "rdiv", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "recover", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "rely", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "repay", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "rmul", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "safeAdd", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "safeDiv", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "safeMul", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "safeSub", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "shelf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "subscriber", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "title", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "token", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "unlock", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "wards", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {
    "LogNote(bytes4,address,bytes32,bytes32,uint256,bytes)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "LogNote"): EventFragment;
}

export type LogNoteEvent = TypedEvent<
  [string, string, string, string, BigNumber, string] & {
    sig: string;
    guy: string;
    foo: string;
    bar: string;
    wad: BigNumber;
    fax: string;
  }
>;

export class Shelf extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: ShelfInterface;

  functions: {
    balance(overrides?: CallOverrides): Promise<[BigNumber]>;

    balanceRequest(overrides?: CallOverrides): Promise<[boolean, BigNumber]>;

    balances(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    borrow(
      loan: BigNumberish,
      currencyAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    ceiling(overrides?: CallOverrides): Promise<[string]>;

    claim(
      loan: BigNumberish,
      usr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    close(
      loan: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    currency(overrides?: CallOverrides): Promise<[string]>;

    deny(
      usr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    depend(
      contractName: BytesLike,
      addr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    distributor(overrides?: CallOverrides): Promise<[string]>;

    issue(
      registry_: string,
      token_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    lender(overrides?: CallOverrides): Promise<[string]>;

    lock(
      loan: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    nftLocked(
      loan: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    nftlookup(arg0: BytesLike, overrides?: CallOverrides): Promise<[BigNumber]>;

    pile(overrides?: CallOverrides): Promise<[string]>;

    rdiv(
      x: BigNumberish,
      y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { z: BigNumber }>;

    recover(
      loan: BigNumberish,
      usr: string,
      currencyAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    rely(
      usr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    repay(
      loan: BigNumberish,
      currencyAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    rmul(
      x: BigNumberish,
      y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { z: BigNumber }>;

    safeAdd(
      x: BigNumberish,
      y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { z: BigNumber }>;

    safeDiv(
      x: BigNumberish,
      y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { z: BigNumber }>;

    safeMul(
      x: BigNumberish,
      y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { z: BigNumber }>;

    safeSub(
      x: BigNumberish,
      y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { z: BigNumber }>;

    shelf(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber] & { registry: string; tokenId: BigNumber }>;

    subscriber(overrides?: CallOverrides): Promise<[string]>;

    title(overrides?: CallOverrides): Promise<[string]>;

    token(
      loan: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber] & { registry: string; nft: BigNumber }>;

    unlock(
      loan: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    wards(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    withdraw(
      loan: BigNumberish,
      currencyAmount: BigNumberish,
      usr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  balance(overrides?: CallOverrides): Promise<BigNumber>;

  balanceRequest(overrides?: CallOverrides): Promise<[boolean, BigNumber]>;

  balances(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  borrow(
    loan: BigNumberish,
    currencyAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  ceiling(overrides?: CallOverrides): Promise<string>;

  claim(
    loan: BigNumberish,
    usr: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  close(
    loan: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  currency(overrides?: CallOverrides): Promise<string>;

  deny(
    usr: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  depend(
    contractName: BytesLike,
    addr: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  distributor(overrides?: CallOverrides): Promise<string>;

  issue(
    registry_: string,
    token_: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  lender(overrides?: CallOverrides): Promise<string>;

  lock(
    loan: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  nftLocked(loan: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

  nftlookup(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

  pile(overrides?: CallOverrides): Promise<string>;

  rdiv(
    x: BigNumberish,
    y: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  recover(
    loan: BigNumberish,
    usr: string,
    currencyAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  rely(
    usr: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  repay(
    loan: BigNumberish,
    currencyAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  rmul(
    x: BigNumberish,
    y: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  safeAdd(
    x: BigNumberish,
    y: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  safeDiv(
    x: BigNumberish,
    y: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  safeMul(
    x: BigNumberish,
    y: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  safeSub(
    x: BigNumberish,
    y: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  shelf(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[string, BigNumber] & { registry: string; tokenId: BigNumber }>;

  subscriber(overrides?: CallOverrides): Promise<string>;

  title(overrides?: CallOverrides): Promise<string>;

  token(
    loan: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[string, BigNumber] & { registry: string; nft: BigNumber }>;

  unlock(
    loan: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  wards(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  withdraw(
    loan: BigNumberish,
    currencyAmount: BigNumberish,
    usr: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    balance(overrides?: CallOverrides): Promise<BigNumber>;

    balanceRequest(overrides?: CallOverrides): Promise<[boolean, BigNumber]>;

    balances(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    borrow(
      loan: BigNumberish,
      currencyAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    ceiling(overrides?: CallOverrides): Promise<string>;

    claim(
      loan: BigNumberish,
      usr: string,
      overrides?: CallOverrides
    ): Promise<void>;

    close(loan: BigNumberish, overrides?: CallOverrides): Promise<void>;

    currency(overrides?: CallOverrides): Promise<string>;

    deny(usr: string, overrides?: CallOverrides): Promise<void>;

    depend(
      contractName: BytesLike,
      addr: string,
      overrides?: CallOverrides
    ): Promise<void>;

    distributor(overrides?: CallOverrides): Promise<string>;

    issue(
      registry_: string,
      token_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lender(overrides?: CallOverrides): Promise<string>;

    lock(loan: BigNumberish, overrides?: CallOverrides): Promise<void>;

    nftLocked(loan: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

    nftlookup(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    pile(overrides?: CallOverrides): Promise<string>;

    rdiv(
      x: BigNumberish,
      y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    recover(
      loan: BigNumberish,
      usr: string,
      currencyAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    rely(usr: string, overrides?: CallOverrides): Promise<void>;

    repay(
      loan: BigNumberish,
      currencyAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    rmul(
      x: BigNumberish,
      y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    safeAdd(
      x: BigNumberish,
      y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    safeDiv(
      x: BigNumberish,
      y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    safeMul(
      x: BigNumberish,
      y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    safeSub(
      x: BigNumberish,
      y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    shelf(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber] & { registry: string; tokenId: BigNumber }>;

    subscriber(overrides?: CallOverrides): Promise<string>;

    title(overrides?: CallOverrides): Promise<string>;

    token(
      loan: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber] & { registry: string; nft: BigNumber }>;

    unlock(loan: BigNumberish, overrides?: CallOverrides): Promise<void>;

    wards(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    withdraw(
      loan: BigNumberish,
      currencyAmount: BigNumberish,
      usr: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "LogNote(bytes4,address,bytes32,bytes32,uint256,bytes)"(
      sig?: BytesLike | null,
      guy?: string | null,
      foo?: BytesLike | null,
      bar?: BytesLike | null,
      wad?: null,
      fax?: null
    ): TypedEventFilter<
      [string, string, string, string, BigNumber, string],
      {
        sig: string;
        guy: string;
        foo: string;
        bar: string;
        wad: BigNumber;
        fax: string;
      }
    >;

    LogNote(
      sig?: BytesLike | null,
      guy?: string | null,
      foo?: BytesLike | null,
      bar?: BytesLike | null,
      wad?: null,
      fax?: null
    ): TypedEventFilter<
      [string, string, string, string, BigNumber, string],
      {
        sig: string;
        guy: string;
        foo: string;
        bar: string;
        wad: BigNumber;
        fax: string;
      }
    >;
  };

  estimateGas: {
    balance(overrides?: CallOverrides): Promise<BigNumber>;

    balanceRequest(overrides?: CallOverrides): Promise<BigNumber>;

    balances(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    borrow(
      loan: BigNumberish,
      currencyAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    ceiling(overrides?: CallOverrides): Promise<BigNumber>;

    claim(
      loan: BigNumberish,
      usr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    close(
      loan: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    currency(overrides?: CallOverrides): Promise<BigNumber>;

    deny(
      usr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    depend(
      contractName: BytesLike,
      addr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    distributor(overrides?: CallOverrides): Promise<BigNumber>;

    issue(
      registry_: string,
      token_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    lender(overrides?: CallOverrides): Promise<BigNumber>;

    lock(
      loan: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    nftLocked(
      loan: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    nftlookup(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    pile(overrides?: CallOverrides): Promise<BigNumber>;

    rdiv(
      x: BigNumberish,
      y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    recover(
      loan: BigNumberish,
      usr: string,
      currencyAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    rely(
      usr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    repay(
      loan: BigNumberish,
      currencyAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    rmul(
      x: BigNumberish,
      y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    safeAdd(
      x: BigNumberish,
      y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    safeDiv(
      x: BigNumberish,
      y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    safeMul(
      x: BigNumberish,
      y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    safeSub(
      x: BigNumberish,
      y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    shelf(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    subscriber(overrides?: CallOverrides): Promise<BigNumber>;

    title(overrides?: CallOverrides): Promise<BigNumber>;

    token(loan: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    unlock(
      loan: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    wards(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    withdraw(
      loan: BigNumberish,
      currencyAmount: BigNumberish,
      usr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    balance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    balanceRequest(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    balances(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    borrow(
      loan: BigNumberish,
      currencyAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    ceiling(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    claim(
      loan: BigNumberish,
      usr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    close(
      loan: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    currency(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    deny(
      usr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    depend(
      contractName: BytesLike,
      addr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    distributor(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    issue(
      registry_: string,
      token_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    lender(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lock(
      loan: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    nftLocked(
      loan: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    nftlookup(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pile(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rdiv(
      x: BigNumberish,
      y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    recover(
      loan: BigNumberish,
      usr: string,
      currencyAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    rely(
      usr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    repay(
      loan: BigNumberish,
      currencyAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    rmul(
      x: BigNumberish,
      y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    safeAdd(
      x: BigNumberish,
      y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    safeDiv(
      x: BigNumberish,
      y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    safeMul(
      x: BigNumberish,
      y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    safeSub(
      x: BigNumberish,
      y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    shelf(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    subscriber(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    title(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    token(
      loan: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    unlock(
      loan: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    wards(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdraw(
      loan: BigNumberish,
      currencyAmount: BigNumberish,
      usr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
