/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface LenderDeployerInterface extends ethers.utils.Interface {
  functions: {
    "assessor()": FunctionFragment;
    "assessorFab()": FunctionFragment;
    "challengeTime()": FunctionFragment;
    "coordinator()": FunctionFragment;
    "coordinatorFab()": FunctionFragment;
    "currency()": FunctionFragment;
    "deploy()": FunctionFragment;
    "deployAssessor()": FunctionFragment;
    "deployCoordinator()": FunctionFragment;
    "deployJunior()": FunctionFragment;
    "deployReserve()": FunctionFragment;
    "deploySenior()": FunctionFragment;
    "deployer()": FunctionFragment;
    "init(uint256,uint256,uint256,uint256,uint256,string,string,string,string)": FunctionFragment;
    "juniorMemberlist()": FunctionFragment;
    "juniorName()": FunctionFragment;
    "juniorOperator()": FunctionFragment;
    "juniorSymbol()": FunctionFragment;
    "juniorToken()": FunctionFragment;
    "juniorTranche()": FunctionFragment;
    "maxReserve()": FunctionFragment;
    "maxSeniorRatio()": FunctionFragment;
    "memberlistFab()": FunctionFragment;
    "minSeniorRatio()": FunctionFragment;
    "operatorFab()": FunctionFragment;
    "reserve()": FunctionFragment;
    "reserveFab()": FunctionFragment;
    "restrictedTokenFab()": FunctionFragment;
    "root()": FunctionFragment;
    "seniorInterestRate()": FunctionFragment;
    "seniorMemberlist()": FunctionFragment;
    "seniorName()": FunctionFragment;
    "seniorOperator()": FunctionFragment;
    "seniorSymbol()": FunctionFragment;
    "seniorToken()": FunctionFragment;
    "seniorTranche()": FunctionFragment;
    "trancheFab()": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "assessor", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "assessorFab",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "challengeTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "coordinator",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "coordinatorFab",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "currency", values?: undefined): string;
  encodeFunctionData(functionFragment: "deploy", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "deployAssessor",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "deployCoordinator",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "deployJunior",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "deployReserve",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "deploySenior",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "deployer", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "init",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      string,
      string,
      string,
      string
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "juniorMemberlist",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "juniorName",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "juniorOperator",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "juniorSymbol",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "juniorToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "juniorTranche",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maxReserve",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maxSeniorRatio",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "memberlistFab",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minSeniorRatio",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "operatorFab",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "reserve", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "reserveFab",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "restrictedTokenFab",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "root", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "seniorInterestRate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "seniorMemberlist",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "seniorName",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "seniorOperator",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "seniorSymbol",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "seniorToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "seniorTranche",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "trancheFab",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "assessor", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "assessorFab",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "challengeTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "coordinator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "coordinatorFab",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "currency", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "deploy", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "deployAssessor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deployCoordinator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deployJunior",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deployReserve",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deploySenior",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deployer", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "init", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "juniorMemberlist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "juniorName", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "juniorOperator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "juniorSymbol",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "juniorToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "juniorTranche",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "maxReserve", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "maxSeniorRatio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "memberlistFab",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minSeniorRatio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "operatorFab",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "reserve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "reserveFab", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "restrictedTokenFab",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "root", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "seniorInterestRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "seniorMemberlist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "seniorName", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "seniorOperator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "seniorSymbol",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "seniorToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "seniorTranche",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "trancheFab", data: BytesLike): Result;

  events: {};
}

export class LenderDeployer extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: LenderDeployerInterface;

  functions: {
    assessor(overrides?: CallOverrides): Promise<[string]>;

    assessorFab(overrides?: CallOverrides): Promise<[string]>;

    challengeTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    coordinator(overrides?: CallOverrides): Promise<[string]>;

    coordinatorFab(overrides?: CallOverrides): Promise<[string]>;

    currency(overrides?: CallOverrides): Promise<[string]>;

    deploy(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    deployAssessor(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    deployCoordinator(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    deployJunior(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    deployReserve(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    deploySenior(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    deployer(overrides?: CallOverrides): Promise<[string]>;

    init(
      minSeniorRatio_: BigNumberish,
      maxSeniorRatio_: BigNumberish,
      maxReserve_: BigNumberish,
      challengeTime_: BigNumberish,
      seniorInterestRate_: BigNumberish,
      seniorName_: string,
      seniorSymbol_: string,
      juniorName_: string,
      juniorSymbol_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    juniorMemberlist(overrides?: CallOverrides): Promise<[string]>;

    juniorName(overrides?: CallOverrides): Promise<[string]>;

    juniorOperator(overrides?: CallOverrides): Promise<[string]>;

    juniorSymbol(overrides?: CallOverrides): Promise<[string]>;

    juniorToken(overrides?: CallOverrides): Promise<[string]>;

    juniorTranche(overrides?: CallOverrides): Promise<[string]>;

    maxReserve(overrides?: CallOverrides): Promise<[BigNumber]>;

    maxSeniorRatio(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { value: BigNumber }>;

    memberlistFab(overrides?: CallOverrides): Promise<[string]>;

    minSeniorRatio(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { value: BigNumber }>;

    operatorFab(overrides?: CallOverrides): Promise<[string]>;

    reserve(overrides?: CallOverrides): Promise<[string]>;

    reserveFab(overrides?: CallOverrides): Promise<[string]>;

    restrictedTokenFab(overrides?: CallOverrides): Promise<[string]>;

    root(overrides?: CallOverrides): Promise<[string]>;

    seniorInterestRate(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { value: BigNumber }>;

    seniorMemberlist(overrides?: CallOverrides): Promise<[string]>;

    seniorName(overrides?: CallOverrides): Promise<[string]>;

    seniorOperator(overrides?: CallOverrides): Promise<[string]>;

    seniorSymbol(overrides?: CallOverrides): Promise<[string]>;

    seniorToken(overrides?: CallOverrides): Promise<[string]>;

    seniorTranche(overrides?: CallOverrides): Promise<[string]>;

    trancheFab(overrides?: CallOverrides): Promise<[string]>;
  };

  assessor(overrides?: CallOverrides): Promise<string>;

  assessorFab(overrides?: CallOverrides): Promise<string>;

  challengeTime(overrides?: CallOverrides): Promise<BigNumber>;

  coordinator(overrides?: CallOverrides): Promise<string>;

  coordinatorFab(overrides?: CallOverrides): Promise<string>;

  currency(overrides?: CallOverrides): Promise<string>;

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  deployAssessor(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  deployCoordinator(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  deployJunior(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  deployReserve(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  deploySenior(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  deployer(overrides?: CallOverrides): Promise<string>;

  init(
    minSeniorRatio_: BigNumberish,
    maxSeniorRatio_: BigNumberish,
    maxReserve_: BigNumberish,
    challengeTime_: BigNumberish,
    seniorInterestRate_: BigNumberish,
    seniorName_: string,
    seniorSymbol_: string,
    juniorName_: string,
    juniorSymbol_: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  juniorMemberlist(overrides?: CallOverrides): Promise<string>;

  juniorName(overrides?: CallOverrides): Promise<string>;

  juniorOperator(overrides?: CallOverrides): Promise<string>;

  juniorSymbol(overrides?: CallOverrides): Promise<string>;

  juniorToken(overrides?: CallOverrides): Promise<string>;

  juniorTranche(overrides?: CallOverrides): Promise<string>;

  maxReserve(overrides?: CallOverrides): Promise<BigNumber>;

  maxSeniorRatio(overrides?: CallOverrides): Promise<BigNumber>;

  memberlistFab(overrides?: CallOverrides): Promise<string>;

  minSeniorRatio(overrides?: CallOverrides): Promise<BigNumber>;

  operatorFab(overrides?: CallOverrides): Promise<string>;

  reserve(overrides?: CallOverrides): Promise<string>;

  reserveFab(overrides?: CallOverrides): Promise<string>;

  restrictedTokenFab(overrides?: CallOverrides): Promise<string>;

  root(overrides?: CallOverrides): Promise<string>;

  seniorInterestRate(overrides?: CallOverrides): Promise<BigNumber>;

  seniorMemberlist(overrides?: CallOverrides): Promise<string>;

  seniorName(overrides?: CallOverrides): Promise<string>;

  seniorOperator(overrides?: CallOverrides): Promise<string>;

  seniorSymbol(overrides?: CallOverrides): Promise<string>;

  seniorToken(overrides?: CallOverrides): Promise<string>;

  seniorTranche(overrides?: CallOverrides): Promise<string>;

  trancheFab(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    assessor(overrides?: CallOverrides): Promise<string>;

    assessorFab(overrides?: CallOverrides): Promise<string>;

    challengeTime(overrides?: CallOverrides): Promise<BigNumber>;

    coordinator(overrides?: CallOverrides): Promise<string>;

    coordinatorFab(overrides?: CallOverrides): Promise<string>;

    currency(overrides?: CallOverrides): Promise<string>;

    deploy(overrides?: CallOverrides): Promise<void>;

    deployAssessor(overrides?: CallOverrides): Promise<void>;

    deployCoordinator(overrides?: CallOverrides): Promise<void>;

    deployJunior(overrides?: CallOverrides): Promise<void>;

    deployReserve(overrides?: CallOverrides): Promise<void>;

    deploySenior(overrides?: CallOverrides): Promise<void>;

    deployer(overrides?: CallOverrides): Promise<string>;

    init(
      minSeniorRatio_: BigNumberish,
      maxSeniorRatio_: BigNumberish,
      maxReserve_: BigNumberish,
      challengeTime_: BigNumberish,
      seniorInterestRate_: BigNumberish,
      seniorName_: string,
      seniorSymbol_: string,
      juniorName_: string,
      juniorSymbol_: string,
      overrides?: CallOverrides
    ): Promise<void>;

    juniorMemberlist(overrides?: CallOverrides): Promise<string>;

    juniorName(overrides?: CallOverrides): Promise<string>;

    juniorOperator(overrides?: CallOverrides): Promise<string>;

    juniorSymbol(overrides?: CallOverrides): Promise<string>;

    juniorToken(overrides?: CallOverrides): Promise<string>;

    juniorTranche(overrides?: CallOverrides): Promise<string>;

    maxReserve(overrides?: CallOverrides): Promise<BigNumber>;

    maxSeniorRatio(overrides?: CallOverrides): Promise<BigNumber>;

    memberlistFab(overrides?: CallOverrides): Promise<string>;

    minSeniorRatio(overrides?: CallOverrides): Promise<BigNumber>;

    operatorFab(overrides?: CallOverrides): Promise<string>;

    reserve(overrides?: CallOverrides): Promise<string>;

    reserveFab(overrides?: CallOverrides): Promise<string>;

    restrictedTokenFab(overrides?: CallOverrides): Promise<string>;

    root(overrides?: CallOverrides): Promise<string>;

    seniorInterestRate(overrides?: CallOverrides): Promise<BigNumber>;

    seniorMemberlist(overrides?: CallOverrides): Promise<string>;

    seniorName(overrides?: CallOverrides): Promise<string>;

    seniorOperator(overrides?: CallOverrides): Promise<string>;

    seniorSymbol(overrides?: CallOverrides): Promise<string>;

    seniorToken(overrides?: CallOverrides): Promise<string>;

    seniorTranche(overrides?: CallOverrides): Promise<string>;

    trancheFab(overrides?: CallOverrides): Promise<string>;
  };

  filters: {};

  estimateGas: {
    assessor(overrides?: CallOverrides): Promise<BigNumber>;

    assessorFab(overrides?: CallOverrides): Promise<BigNumber>;

    challengeTime(overrides?: CallOverrides): Promise<BigNumber>;

    coordinator(overrides?: CallOverrides): Promise<BigNumber>;

    coordinatorFab(overrides?: CallOverrides): Promise<BigNumber>;

    currency(overrides?: CallOverrides): Promise<BigNumber>;

    deploy(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    deployAssessor(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    deployCoordinator(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    deployJunior(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    deployReserve(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    deploySenior(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    deployer(overrides?: CallOverrides): Promise<BigNumber>;

    init(
      minSeniorRatio_: BigNumberish,
      maxSeniorRatio_: BigNumberish,
      maxReserve_: BigNumberish,
      challengeTime_: BigNumberish,
      seniorInterestRate_: BigNumberish,
      seniorName_: string,
      seniorSymbol_: string,
      juniorName_: string,
      juniorSymbol_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    juniorMemberlist(overrides?: CallOverrides): Promise<BigNumber>;

    juniorName(overrides?: CallOverrides): Promise<BigNumber>;

    juniorOperator(overrides?: CallOverrides): Promise<BigNumber>;

    juniorSymbol(overrides?: CallOverrides): Promise<BigNumber>;

    juniorToken(overrides?: CallOverrides): Promise<BigNumber>;

    juniorTranche(overrides?: CallOverrides): Promise<BigNumber>;

    maxReserve(overrides?: CallOverrides): Promise<BigNumber>;

    maxSeniorRatio(overrides?: CallOverrides): Promise<BigNumber>;

    memberlistFab(overrides?: CallOverrides): Promise<BigNumber>;

    minSeniorRatio(overrides?: CallOverrides): Promise<BigNumber>;

    operatorFab(overrides?: CallOverrides): Promise<BigNumber>;

    reserve(overrides?: CallOverrides): Promise<BigNumber>;

    reserveFab(overrides?: CallOverrides): Promise<BigNumber>;

    restrictedTokenFab(overrides?: CallOverrides): Promise<BigNumber>;

    root(overrides?: CallOverrides): Promise<BigNumber>;

    seniorInterestRate(overrides?: CallOverrides): Promise<BigNumber>;

    seniorMemberlist(overrides?: CallOverrides): Promise<BigNumber>;

    seniorName(overrides?: CallOverrides): Promise<BigNumber>;

    seniorOperator(overrides?: CallOverrides): Promise<BigNumber>;

    seniorSymbol(overrides?: CallOverrides): Promise<BigNumber>;

    seniorToken(overrides?: CallOverrides): Promise<BigNumber>;

    seniorTranche(overrides?: CallOverrides): Promise<BigNumber>;

    trancheFab(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    assessor(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    assessorFab(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    challengeTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    coordinator(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    coordinatorFab(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    currency(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    deploy(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    deployAssessor(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    deployCoordinator(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    deployJunior(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    deployReserve(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    deploySenior(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    deployer(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    init(
      minSeniorRatio_: BigNumberish,
      maxSeniorRatio_: BigNumberish,
      maxReserve_: BigNumberish,
      challengeTime_: BigNumberish,
      seniorInterestRate_: BigNumberish,
      seniorName_: string,
      seniorSymbol_: string,
      juniorName_: string,
      juniorSymbol_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    juniorMemberlist(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    juniorName(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    juniorOperator(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    juniorSymbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    juniorToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    juniorTranche(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    maxReserve(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    maxSeniorRatio(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    memberlistFab(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    minSeniorRatio(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    operatorFab(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    reserve(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    reserveFab(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    restrictedTokenFab(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    root(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    seniorInterestRate(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    seniorMemberlist(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    seniorName(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    seniorOperator(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    seniorSymbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    seniorToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    seniorTranche(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    trancheFab(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
