/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface PileTestInterface extends ethers.utils.Interface {
  functions: {
    "IS_TEST()": FunctionFragment;
    "assertDebt(uint256,uint256)": FunctionFragment;
    "chargeInterest(uint256,uint256,uint256)": FunctionFragment;
    "compounding(uint256,uint256,uint256,uint256)": FunctionFragment;
    "failed()": FunctionFragment;
    "rdiv(uint256,uint256)": FunctionFragment;
    "rmul(uint256,uint256)": FunctionFragment;
    "rpow(uint256,uint256,uint256)": FunctionFragment;
    "safeAdd(uint256,uint256)": FunctionFragment;
    "safeDiv(uint256,uint256)": FunctionFragment;
    "safeMul(uint256,uint256)": FunctionFragment;
    "safeSub(uint256,uint256)": FunctionFragment;
    "setUp()": FunctionFragment;
    "testAccrue()": FunctionFragment;
    "testChangeRate()": FunctionFragment;
    "testChangeRateNoDebt()": FunctionFragment;
    "testDecDebt()": FunctionFragment;
    "testDrip()": FunctionFragment;
    "testFailChangeRate()": FunctionFragment;
    "testFailDecDebtNoAccrue()": FunctionFragment;
    "testFailIncDebtNoAccrue()": FunctionFragment;
    "testFailSetRate()": FunctionFragment;
    "testFailrateIndexTooHigh()": FunctionFragment;
    "testIncDebtNoFixedFee()": FunctionFragment;
    "testIncDebtWithFixedFee()": FunctionFragment;
    "testInitRateGroup()": FunctionFragment;
    "testMaxDebt()": FunctionFragment;
    "testMaxrateIndex()": FunctionFragment;
    "testSetFixedRate()": FunctionFragment;
    "testSingleCompoundDay()": FunctionFragment;
    "testSingleCompoundSec()": FunctionFragment;
    "testSingleCompoundYear()": FunctionFragment;
    "testUpdateRateGroup()": FunctionFragment;
    "toAmount(uint256,uint256)": FunctionFragment;
    "toPie(uint256,uint256)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "IS_TEST", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "assertDebt",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "chargeInterest",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "compounding",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "failed", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "rdiv",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "rmul",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "rpow",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "safeAdd",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "safeDiv",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "safeMul",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "safeSub",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "setUp", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "testAccrue",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "testChangeRate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "testChangeRateNoDebt",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "testDecDebt",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "testDrip", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "testFailChangeRate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "testFailDecDebtNoAccrue",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "testFailIncDebtNoAccrue",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "testFailSetRate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "testFailrateIndexTooHigh",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "testIncDebtNoFixedFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "testIncDebtWithFixedFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "testInitRateGroup",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "testMaxDebt",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "testMaxrateIndex",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "testSetFixedRate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "testSingleCompoundDay",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "testSingleCompoundSec",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "testSingleCompoundYear",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "testUpdateRateGroup",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "toAmount",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "toPie",
    values: [BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "IS_TEST", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "assertDebt", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "chargeInterest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "compounding",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "failed", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "rdiv", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "rmul", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "rpow", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "safeAdd", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "safeDiv", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "safeMul", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "safeSub", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setUp", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "testAccrue", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "testChangeRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testChangeRateNoDebt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testDecDebt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "testDrip", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "testFailChangeRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testFailDecDebtNoAccrue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testFailIncDebtNoAccrue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testFailSetRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testFailrateIndexTooHigh",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testIncDebtNoFixedFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testIncDebtWithFixedFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testInitRateGroup",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testMaxDebt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testMaxrateIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testSetFixedRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testSingleCompoundDay",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testSingleCompoundSec",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testSingleCompoundYear",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testUpdateRateGroup",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "toAmount", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "toPie", data: BytesLike): Result;

  events: {
    "eventListener(address,bool)": EventFragment;
    "log_bytes32(bytes32)": EventFragment;
    "log_named_address(bytes32,address)": EventFragment;
    "log_named_bytes32(bytes32,bytes32)": EventFragment;
    "log_named_decimal_int(bytes32,int256,uint256)": EventFragment;
    "log_named_decimal_uint(bytes32,uint256,uint256)": EventFragment;
    "log_named_int(bytes32,int256)": EventFragment;
    "log_named_string(bytes32,string)": EventFragment;
    "log_named_uint(bytes32,uint256)": EventFragment;
    "logs(bytes)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "eventListener"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log_bytes32"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log_named_address"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log_named_bytes32"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log_named_decimal_int"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log_named_decimal_uint"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log_named_int"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log_named_string"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log_named_uint"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "logs"): EventFragment;
}

export class PileTest extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: PileTestInterface;

  functions: {
    IS_TEST(overrides?: CallOverrides): Promise<[boolean]>;

    assertDebt(
      loan: BigNumberish,
      should: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    chargeInterest(
      interestBearingAmount: BigNumberish,
      ratePerSecond: BigNumberish,
      lastUpdated: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    compounding(
      chi: BigNumberish,
      ratePerSecond: BigNumberish,
      lastUpdated: BigNumberish,
      pie: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    failed(overrides?: CallOverrides): Promise<[boolean]>;

    rdiv(
      x: BigNumberish,
      y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { z: BigNumber }>;

    rmul(
      x: BigNumberish,
      y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { z: BigNumber }>;

    rpow(
      x: BigNumberish,
      n: BigNumberish,
      base: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { z: BigNumber }>;

    safeAdd(
      x: BigNumberish,
      y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { z: BigNumber }>;

    safeDiv(
      x: BigNumberish,
      y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { z: BigNumber }>;

    safeMul(
      x: BigNumberish,
      y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { z: BigNumber }>;

    safeSub(
      x: BigNumberish,
      y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { z: BigNumber }>;

    setUp(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    testAccrue(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    testChangeRate(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    testChangeRateNoDebt(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    testDecDebt(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    testDrip(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    testFailChangeRate(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    testFailDecDebtNoAccrue(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    testFailIncDebtNoAccrue(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    testFailSetRate(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    testFailrateIndexTooHigh(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    testIncDebtNoFixedFee(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    testIncDebtWithFixedFee(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    testInitRateGroup(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    testMaxDebt(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    testMaxrateIndex(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    testSetFixedRate(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    testSingleCompoundDay(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    testSingleCompoundSec(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    testSingleCompoundYear(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    testUpdateRateGroup(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    toAmount(
      chi: BigNumberish,
      pie: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    toPie(
      chi: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;
  };

  IS_TEST(overrides?: CallOverrides): Promise<boolean>;

  assertDebt(
    loan: BigNumberish,
    should: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  chargeInterest(
    interestBearingAmount: BigNumberish,
    ratePerSecond: BigNumberish,
    lastUpdated: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  compounding(
    chi: BigNumberish,
    ratePerSecond: BigNumberish,
    lastUpdated: BigNumberish,
    pie: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber]>;

  failed(overrides?: CallOverrides): Promise<boolean>;

  rdiv(
    x: BigNumberish,
    y: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  rmul(
    x: BigNumberish,
    y: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  rpow(
    x: BigNumberish,
    n: BigNumberish,
    base: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  safeAdd(
    x: BigNumberish,
    y: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  safeDiv(
    x: BigNumberish,
    y: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  safeMul(
    x: BigNumberish,
    y: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  safeSub(
    x: BigNumberish,
    y: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  setUp(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  testAccrue(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  testChangeRate(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  testChangeRateNoDebt(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  testDecDebt(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  testDrip(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  testFailChangeRate(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  testFailDecDebtNoAccrue(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  testFailIncDebtNoAccrue(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  testFailSetRate(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  testFailrateIndexTooHigh(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  testIncDebtNoFixedFee(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  testIncDebtWithFixedFee(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  testInitRateGroup(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  testMaxDebt(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  testMaxrateIndex(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  testSetFixedRate(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  testSingleCompoundDay(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  testSingleCompoundSec(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  testSingleCompoundYear(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  testUpdateRateGroup(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  toAmount(
    chi: BigNumberish,
    pie: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  toPie(
    chi: BigNumberish,
    amount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  callStatic: {
    IS_TEST(overrides?: CallOverrides): Promise<boolean>;

    assertDebt(
      loan: BigNumberish,
      should: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    chargeInterest(
      interestBearingAmount: BigNumberish,
      ratePerSecond: BigNumberish,
      lastUpdated: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    compounding(
      chi: BigNumberish,
      ratePerSecond: BigNumberish,
      lastUpdated: BigNumberish,
      pie: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    failed(overrides?: CallOverrides): Promise<boolean>;

    rdiv(
      x: BigNumberish,
      y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rmul(
      x: BigNumberish,
      y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rpow(
      x: BigNumberish,
      n: BigNumberish,
      base: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    safeAdd(
      x: BigNumberish,
      y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    safeDiv(
      x: BigNumberish,
      y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    safeMul(
      x: BigNumberish,
      y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    safeSub(
      x: BigNumberish,
      y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setUp(overrides?: CallOverrides): Promise<void>;

    testAccrue(overrides?: CallOverrides): Promise<void>;

    testChangeRate(overrides?: CallOverrides): Promise<void>;

    testChangeRateNoDebt(overrides?: CallOverrides): Promise<void>;

    testDecDebt(overrides?: CallOverrides): Promise<void>;

    testDrip(overrides?: CallOverrides): Promise<void>;

    testFailChangeRate(overrides?: CallOverrides): Promise<void>;

    testFailDecDebtNoAccrue(overrides?: CallOverrides): Promise<void>;

    testFailIncDebtNoAccrue(overrides?: CallOverrides): Promise<void>;

    testFailSetRate(overrides?: CallOverrides): Promise<void>;

    testFailrateIndexTooHigh(overrides?: CallOverrides): Promise<void>;

    testIncDebtNoFixedFee(overrides?: CallOverrides): Promise<void>;

    testIncDebtWithFixedFee(overrides?: CallOverrides): Promise<void>;

    testInitRateGroup(overrides?: CallOverrides): Promise<void>;

    testMaxDebt(overrides?: CallOverrides): Promise<void>;

    testMaxrateIndex(overrides?: CallOverrides): Promise<void>;

    testSetFixedRate(overrides?: CallOverrides): Promise<void>;

    testSingleCompoundDay(overrides?: CallOverrides): Promise<void>;

    testSingleCompoundSec(overrides?: CallOverrides): Promise<void>;

    testSingleCompoundYear(overrides?: CallOverrides): Promise<void>;

    testUpdateRateGroup(overrides?: CallOverrides): Promise<void>;

    toAmount(
      chi: BigNumberish,
      pie: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    toPie(
      chi: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {
    eventListener(
      target?: null,
      exact?: null
    ): TypedEventFilter<[string, boolean], { target: string; exact: boolean }>;

    log_bytes32(undefined?: null): TypedEventFilter<[string], { arg0: string }>;

    log_named_address(
      key?: null,
      val?: null
    ): TypedEventFilter<[string, string], { key: string; val: string }>;

    log_named_bytes32(
      key?: null,
      val?: null
    ): TypedEventFilter<[string, string], { key: string; val: string }>;

    log_named_decimal_int(
      key?: null,
      val?: null,
      decimals?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { key: string; val: BigNumber; decimals: BigNumber }
    >;

    log_named_decimal_uint(
      key?: null,
      val?: null,
      decimals?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { key: string; val: BigNumber; decimals: BigNumber }
    >;

    log_named_int(
      key?: null,
      val?: null
    ): TypedEventFilter<[string, BigNumber], { key: string; val: BigNumber }>;

    log_named_string(
      key?: null,
      val?: null
    ): TypedEventFilter<[string, string], { key: string; val: string }>;

    log_named_uint(
      key?: null,
      val?: null
    ): TypedEventFilter<[string, BigNumber], { key: string; val: BigNumber }>;

    logs(undefined?: null): TypedEventFilter<[string], { arg0: string }>;
  };

  estimateGas: {
    IS_TEST(overrides?: CallOverrides): Promise<BigNumber>;

    assertDebt(
      loan: BigNumberish,
      should: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    chargeInterest(
      interestBearingAmount: BigNumberish,
      ratePerSecond: BigNumberish,
      lastUpdated: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    compounding(
      chi: BigNumberish,
      ratePerSecond: BigNumberish,
      lastUpdated: BigNumberish,
      pie: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    failed(overrides?: CallOverrides): Promise<BigNumber>;

    rdiv(
      x: BigNumberish,
      y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rmul(
      x: BigNumberish,
      y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rpow(
      x: BigNumberish,
      n: BigNumberish,
      base: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    safeAdd(
      x: BigNumberish,
      y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    safeDiv(
      x: BigNumberish,
      y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    safeMul(
      x: BigNumberish,
      y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    safeSub(
      x: BigNumberish,
      y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setUp(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    testAccrue(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    testChangeRate(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    testChangeRateNoDebt(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    testDecDebt(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    testDrip(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    testFailChangeRate(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    testFailDecDebtNoAccrue(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    testFailIncDebtNoAccrue(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    testFailSetRate(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    testFailrateIndexTooHigh(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    testIncDebtNoFixedFee(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    testIncDebtWithFixedFee(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    testInitRateGroup(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    testMaxDebt(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    testMaxrateIndex(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    testSetFixedRate(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    testSingleCompoundDay(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    testSingleCompoundSec(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    testSingleCompoundYear(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    testUpdateRateGroup(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    toAmount(
      chi: BigNumberish,
      pie: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    toPie(
      chi: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    IS_TEST(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    assertDebt(
      loan: BigNumberish,
      should: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    chargeInterest(
      interestBearingAmount: BigNumberish,
      ratePerSecond: BigNumberish,
      lastUpdated: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    compounding(
      chi: BigNumberish,
      ratePerSecond: BigNumberish,
      lastUpdated: BigNumberish,
      pie: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    failed(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rdiv(
      x: BigNumberish,
      y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rmul(
      x: BigNumberish,
      y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rpow(
      x: BigNumberish,
      n: BigNumberish,
      base: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    safeAdd(
      x: BigNumberish,
      y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    safeDiv(
      x: BigNumberish,
      y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    safeMul(
      x: BigNumberish,
      y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    safeSub(
      x: BigNumberish,
      y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setUp(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    testAccrue(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    testChangeRate(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    testChangeRateNoDebt(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    testDecDebt(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    testDrip(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    testFailChangeRate(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    testFailDecDebtNoAccrue(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    testFailIncDebtNoAccrue(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    testFailSetRate(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    testFailrateIndexTooHigh(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    testIncDebtNoFixedFee(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    testIncDebtWithFixedFee(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    testInitRateGroup(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    testMaxDebt(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    testMaxrateIndex(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    testSetFixedRate(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    testSingleCompoundDay(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    testSingleCompoundSec(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    testSingleCompoundYear(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    testUpdateRateGroup(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    toAmount(
      chi: BigNumberish,
      pie: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    toPie(
      chi: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
