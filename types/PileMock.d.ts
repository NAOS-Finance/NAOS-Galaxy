/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface PileMockInterface extends ethers.utils.Interface {
  functions: {
    "accrue(uint256)": FunctionFragment;
    "calls(bytes32)": FunctionFragment;
    "changeRate(uint256,uint256)": FunctionFragment;
    "debt()": FunctionFragment;
    "decDebt(uint256,uint256)": FunctionFragment;
    "file(bytes32,uint256,uint256)": FunctionFragment;
    "incDebt(uint256,uint256)": FunctionFragment;
    "loanRates(uint256)": FunctionFragment;
    "pie(uint256)": FunctionFragment;
    "rateDebt(uint256)": FunctionFragment;
    "rates(uint256)": FunctionFragment;
    "setFail(bytes32,bool)": FunctionFragment;
    "setRate(uint256,uint256)": FunctionFragment;
    "setReturn(bytes32,bool)": FunctionFragment;
    "total()": FunctionFragment;
    "values_address(bytes32)": FunctionFragment;
    "values_address_return(bytes32)": FunctionFragment;
    "values_bool_return(bytes32)": FunctionFragment;
    "values_bytes32(bytes32)": FunctionFragment;
    "values_return(bytes32)": FunctionFragment;
    "values_uint(bytes32)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "accrue",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "calls", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "changeRate",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "debt", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "decDebt",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "file",
    values: [BytesLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "incDebt",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "loanRates",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "pie", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "rateDebt",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "rates", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "setFail",
    values: [BytesLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setRate",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setReturn",
    values: [BytesLike, boolean]
  ): string;
  encodeFunctionData(functionFragment: "total", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "values_address",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "values_address_return",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "values_bool_return",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "values_bytes32",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "values_return",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "values_uint",
    values: [BytesLike]
  ): string;

  decodeFunctionResult(functionFragment: "accrue", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "calls", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "changeRate", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "debt", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "decDebt", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "file", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "incDebt", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "loanRates", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pie", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "rateDebt", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "rates", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setFail", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setRate", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setReturn", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "total", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "values_address",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "values_address_return",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "values_bool_return",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "values_bytes32",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "values_return",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "values_uint",
    data: BytesLike
  ): Result;

  events: {};
}

export class PileMock extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: PileMockInterface;

  functions: {
    accrue(
      loan: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    calls(arg0: BytesLike, overrides?: CallOverrides): Promise<[BigNumber]>;

    changeRate(
      loan: BigNumberish,
      rate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "debt()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "debt(uint256)"(
      loan: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    decDebt(
      loan: BigNumberish,
      currencyAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    file(
      arg0: BytesLike,
      rate: BigNumberish,
      ratePerSecond: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    incDebt(
      loan: BigNumberish,
      currencyAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    loanRates(
      arg0: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    pie(
      arg0: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    rateDebt(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    rates(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, BigNumber, number, BigNumber]>;

    setFail(
      name: BytesLike,
      flag: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setRate(
      loan: BigNumberish,
      rate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setReturn(bytes32,bool)"(
      name: BytesLike,
      returnValue: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setReturn(bytes32,bool,uint256)"(
      name: BytesLike,
      flag: boolean,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setReturn(bytes32,address)"(
      name: BytesLike,
      returnValue: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setReturn(bytes32,uint256)"(
      name: BytesLike,
      returnValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setReturn(bytes32,address,uint256)"(
      name: BytesLike,
      addr: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    total(overrides?: CallOverrides): Promise<[BigNumber]>;

    values_address(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    values_address_return(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    values_bool_return(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    values_bytes32(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    values_return(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    values_uint(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;
  };

  accrue(
    loan: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  calls(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

  changeRate(
    loan: BigNumberish,
    rate: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "debt()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "debt(uint256)"(
    loan: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  decDebt(
    loan: BigNumberish,
    currencyAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  file(
    arg0: BytesLike,
    rate: BigNumberish,
    ratePerSecond: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  incDebt(
    loan: BigNumberish,
    currencyAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  loanRates(
    arg0: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  pie(
    arg0: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  rateDebt(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  rates(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber, BigNumber, number, BigNumber]>;

  setFail(
    name: BytesLike,
    flag: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setRate(
    loan: BigNumberish,
    rate: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setReturn(bytes32,bool)"(
    name: BytesLike,
    returnValue: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setReturn(bytes32,bool,uint256)"(
    name: BytesLike,
    flag: boolean,
    value: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setReturn(bytes32,address)"(
    name: BytesLike,
    returnValue: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setReturn(bytes32,uint256)"(
    name: BytesLike,
    returnValue: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setReturn(bytes32,address,uint256)"(
    name: BytesLike,
    addr: string,
    value: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  total(overrides?: CallOverrides): Promise<BigNumber>;

  values_address(arg0: BytesLike, overrides?: CallOverrides): Promise<string>;

  values_address_return(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  values_bool_return(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  values_bytes32(arg0: BytesLike, overrides?: CallOverrides): Promise<string>;

  values_return(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

  values_uint(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    accrue(loan: BigNumberish, overrides?: CallOverrides): Promise<void>;

    calls(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    changeRate(
      loan: BigNumberish,
      rate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "debt()"(overrides?: CallOverrides): Promise<BigNumber>;

    "debt(uint256)"(
      loan: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    decDebt(
      loan: BigNumberish,
      currencyAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    file(
      arg0: BytesLike,
      rate: BigNumberish,
      ratePerSecond: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    incDebt(
      loan: BigNumberish,
      currencyAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    loanRates(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pie(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    rateDebt(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    rates(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, BigNumber, number, BigNumber]>;

    setFail(
      name: BytesLike,
      flag: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setRate(
      loan: BigNumberish,
      rate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setReturn(bytes32,bool)"(
      name: BytesLike,
      returnValue: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "setReturn(bytes32,bool,uint256)"(
      name: BytesLike,
      flag: boolean,
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setReturn(bytes32,address)"(
      name: BytesLike,
      returnValue: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setReturn(bytes32,uint256)"(
      name: BytesLike,
      returnValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setReturn(bytes32,address,uint256)"(
      name: BytesLike,
      addr: string,
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    total(overrides?: CallOverrides): Promise<BigNumber>;

    values_address(arg0: BytesLike, overrides?: CallOverrides): Promise<string>;

    values_address_return(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    values_bool_return(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    values_bytes32(arg0: BytesLike, overrides?: CallOverrides): Promise<string>;

    values_return(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    values_uint(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    accrue(
      loan: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    calls(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    changeRate(
      loan: BigNumberish,
      rate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "debt()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "debt(uint256)"(
      loan: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    decDebt(
      loan: BigNumberish,
      currencyAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    file(
      arg0: BytesLike,
      rate: BigNumberish,
      ratePerSecond: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    incDebt(
      loan: BigNumberish,
      currencyAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    loanRates(
      arg0: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    pie(
      arg0: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    rateDebt(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    rates(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    setFail(
      name: BytesLike,
      flag: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setRate(
      loan: BigNumberish,
      rate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setReturn(bytes32,bool)"(
      name: BytesLike,
      returnValue: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setReturn(bytes32,bool,uint256)"(
      name: BytesLike,
      flag: boolean,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setReturn(bytes32,address)"(
      name: BytesLike,
      returnValue: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setReturn(bytes32,uint256)"(
      name: BytesLike,
      returnValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setReturn(bytes32,address,uint256)"(
      name: BytesLike,
      addr: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    total(overrides?: CallOverrides): Promise<BigNumber>;

    values_address(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    values_address_return(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    values_bool_return(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    values_bytes32(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    values_return(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    values_uint(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    accrue(
      loan: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    calls(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    changeRate(
      loan: BigNumberish,
      rate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "debt()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "debt(uint256)"(
      loan: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    decDebt(
      loan: BigNumberish,
      currencyAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    file(
      arg0: BytesLike,
      rate: BigNumberish,
      ratePerSecond: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    incDebt(
      loan: BigNumberish,
      currencyAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    loanRates(
      arg0: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    pie(
      arg0: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    rateDebt(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rates(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setFail(
      name: BytesLike,
      flag: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setRate(
      loan: BigNumberish,
      rate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setReturn(bytes32,bool)"(
      name: BytesLike,
      returnValue: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setReturn(bytes32,bool,uint256)"(
      name: BytesLike,
      flag: boolean,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setReturn(bytes32,address)"(
      name: BytesLike,
      returnValue: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setReturn(bytes32,uint256)"(
      name: BytesLike,
      returnValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setReturn(bytes32,address,uint256)"(
      name: BytesLike,
      addr: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    total(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    values_address(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    values_address_return(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    values_bool_return(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    values_bytes32(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    values_return(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    values_uint(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
