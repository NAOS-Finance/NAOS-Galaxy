/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface NAVTestInterface extends ethers.utils.Interface {
  functions: {
    "IS_TEST()": FunctionFragment;
    "failed()": FunctionFragment;
    "feed()": FunctionFragment;
    "listLen()": FunctionFragment;
    "prepareDefaultNFT(uint256,uint256,uint256)": FunctionFragment;
    "rdiv(uint256,uint256)": FunctionFragment;
    "rmul(uint256,uint256)": FunctionFragment;
    "safeAdd(uint256,uint256)": FunctionFragment;
    "safeDiv(uint256,uint256)": FunctionFragment;
    "safeMul(uint256,uint256)": FunctionFragment;
    "safeSub(uint256,uint256)": FunctionFragment;
    "setUp()": FunctionFragment;
    "setupLinkedListBuckets()": FunctionFragment;
    "testBorrowWithFixedFee()": FunctionFragment;
    "testChangeMaturityDateNoDebt()": FunctionFragment;
    "testChangeMaturityDebtRepaid()": FunctionFragment;
    "testChangeRiskGroup()": FunctionFragment;
    "testFailChangeMaturityDateLoanOngoing()": FunctionFragment;
    "testLinkedListBucket()": FunctionFragment;
    "testNormalizeDate()": FunctionFragment;
    "testRecoveryRatePD()": FunctionFragment;
    "testRemoveBuckets()": FunctionFragment;
    "testRepay()": FunctionFragment;
    "testRepayAfterMaturityDate()": FunctionFragment;
    "testSimpleBorrow()": FunctionFragment;
    "testTimeOverBuckets()": FunctionFragment;
    "testWriteOffs()": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "IS_TEST", values?: undefined): string;
  encodeFunctionData(functionFragment: "failed", values?: undefined): string;
  encodeFunctionData(functionFragment: "feed", values?: undefined): string;
  encodeFunctionData(functionFragment: "listLen", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "prepareDefaultNFT",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "rdiv",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "rmul",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "safeAdd",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "safeDiv",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "safeMul",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "safeSub",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "setUp", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setupLinkedListBuckets",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "testBorrowWithFixedFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "testChangeMaturityDateNoDebt",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "testChangeMaturityDebtRepaid",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "testChangeRiskGroup",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "testFailChangeMaturityDateLoanOngoing",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "testLinkedListBucket",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "testNormalizeDate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "testRecoveryRatePD",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "testRemoveBuckets",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "testRepay", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "testRepayAfterMaturityDate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "testSimpleBorrow",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "testTimeOverBuckets",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "testWriteOffs",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "IS_TEST", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "failed", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "feed", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "listLen", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "prepareDefaultNFT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "rdiv", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "rmul", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "safeAdd", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "safeDiv", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "safeMul", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "safeSub", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setUp", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setupLinkedListBuckets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testBorrowWithFixedFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testChangeMaturityDateNoDebt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testChangeMaturityDebtRepaid",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testChangeRiskGroup",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testFailChangeMaturityDateLoanOngoing",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testLinkedListBucket",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testNormalizeDate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testRecoveryRatePD",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testRemoveBuckets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "testRepay", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "testRepayAfterMaturityDate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testSimpleBorrow",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testTimeOverBuckets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testWriteOffs",
    data: BytesLike
  ): Result;

  events: {
    "eventListener(address,bool)": EventFragment;
    "log_bytes32(bytes32)": EventFragment;
    "log_named_address(bytes32,address)": EventFragment;
    "log_named_bytes32(bytes32,bytes32)": EventFragment;
    "log_named_decimal_int(bytes32,int256,uint256)": EventFragment;
    "log_named_decimal_uint(bytes32,uint256,uint256)": EventFragment;
    "log_named_int(bytes32,int256)": EventFragment;
    "log_named_string(bytes32,string)": EventFragment;
    "log_named_uint(bytes32,uint256)": EventFragment;
    "logs(bytes)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "eventListener"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log_bytes32"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log_named_address"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log_named_bytes32"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log_named_decimal_int"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log_named_decimal_uint"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log_named_int"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log_named_string"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log_named_uint"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "logs"): EventFragment;
}

export class NAVTest extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: NAVTestInterface;

  functions: {
    IS_TEST(overrides?: CallOverrides): Promise<[boolean]>;

    failed(overrides?: CallOverrides): Promise<[boolean]>;

    feed(overrides?: CallOverrides): Promise<[string]>;

    listLen(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "prepareDefaultNFT(uint256,uint256,uint256)"(
      tokenId: BigNumberish,
      nftValue: BigNumberish,
      risk: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "prepareDefaultNFT(uint256,uint256)"(
      tokenId: BigNumberish,
      nftValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    rdiv(
      x: BigNumberish,
      y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { z: BigNumber }>;

    rmul(
      x: BigNumberish,
      y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { z: BigNumber }>;

    safeAdd(
      x: BigNumberish,
      y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { z: BigNumber }>;

    safeDiv(
      x: BigNumberish,
      y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { z: BigNumber }>;

    safeMul(
      x: BigNumberish,
      y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { z: BigNumber }>;

    safeSub(
      x: BigNumberish,
      y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { z: BigNumber }>;

    setUp(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setupLinkedListBuckets(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    testBorrowWithFixedFee(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    testChangeMaturityDateNoDebt(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    testChangeMaturityDebtRepaid(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    testChangeRiskGroup(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    testFailChangeMaturityDateLoanOngoing(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    testLinkedListBucket(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    testNormalizeDate(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    testRecoveryRatePD(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    testRemoveBuckets(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    testRepay(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    testRepayAfterMaturityDate(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    testSimpleBorrow(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    testTimeOverBuckets(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    testWriteOffs(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  IS_TEST(overrides?: CallOverrides): Promise<boolean>;

  failed(overrides?: CallOverrides): Promise<boolean>;

  feed(overrides?: CallOverrides): Promise<string>;

  listLen(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "prepareDefaultNFT(uint256,uint256,uint256)"(
    tokenId: BigNumberish,
    nftValue: BigNumberish,
    risk: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "prepareDefaultNFT(uint256,uint256)"(
    tokenId: BigNumberish,
    nftValue: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  rdiv(
    x: BigNumberish,
    y: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  rmul(
    x: BigNumberish,
    y: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  safeAdd(
    x: BigNumberish,
    y: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  safeDiv(
    x: BigNumberish,
    y: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  safeMul(
    x: BigNumberish,
    y: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  safeSub(
    x: BigNumberish,
    y: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  setUp(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setupLinkedListBuckets(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  testBorrowWithFixedFee(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  testChangeMaturityDateNoDebt(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  testChangeMaturityDebtRepaid(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  testChangeRiskGroup(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  testFailChangeMaturityDateLoanOngoing(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  testLinkedListBucket(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  testNormalizeDate(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  testRecoveryRatePD(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  testRemoveBuckets(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  testRepay(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  testRepayAfterMaturityDate(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  testSimpleBorrow(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  testTimeOverBuckets(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  testWriteOffs(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    IS_TEST(overrides?: CallOverrides): Promise<boolean>;

    failed(overrides?: CallOverrides): Promise<boolean>;

    feed(overrides?: CallOverrides): Promise<string>;

    listLen(overrides?: CallOverrides): Promise<BigNumber>;

    "prepareDefaultNFT(uint256,uint256,uint256)"(
      tokenId: BigNumberish,
      nftValue: BigNumberish,
      risk: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "prepareDefaultNFT(uint256,uint256)"(
      tokenId: BigNumberish,
      nftValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    rdiv(
      x: BigNumberish,
      y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rmul(
      x: BigNumberish,
      y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    safeAdd(
      x: BigNumberish,
      y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    safeDiv(
      x: BigNumberish,
      y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    safeMul(
      x: BigNumberish,
      y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    safeSub(
      x: BigNumberish,
      y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setUp(overrides?: CallOverrides): Promise<void>;

    setupLinkedListBuckets(overrides?: CallOverrides): Promise<void>;

    testBorrowWithFixedFee(overrides?: CallOverrides): Promise<void>;

    testChangeMaturityDateNoDebt(overrides?: CallOverrides): Promise<void>;

    testChangeMaturityDebtRepaid(overrides?: CallOverrides): Promise<void>;

    testChangeRiskGroup(overrides?: CallOverrides): Promise<void>;

    testFailChangeMaturityDateLoanOngoing(
      overrides?: CallOverrides
    ): Promise<void>;

    testLinkedListBucket(overrides?: CallOverrides): Promise<void>;

    testNormalizeDate(overrides?: CallOverrides): Promise<void>;

    testRecoveryRatePD(overrides?: CallOverrides): Promise<void>;

    testRemoveBuckets(overrides?: CallOverrides): Promise<void>;

    testRepay(overrides?: CallOverrides): Promise<void>;

    testRepayAfterMaturityDate(overrides?: CallOverrides): Promise<void>;

    testSimpleBorrow(overrides?: CallOverrides): Promise<void>;

    testTimeOverBuckets(overrides?: CallOverrides): Promise<void>;

    testWriteOffs(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    eventListener(
      target?: null,
      exact?: null
    ): TypedEventFilter<[string, boolean], { target: string; exact: boolean }>;

    log_bytes32(undefined?: null): TypedEventFilter<[string], { arg0: string }>;

    log_named_address(
      key?: null,
      val?: null
    ): TypedEventFilter<[string, string], { key: string; val: string }>;

    log_named_bytes32(
      key?: null,
      val?: null
    ): TypedEventFilter<[string, string], { key: string; val: string }>;

    log_named_decimal_int(
      key?: null,
      val?: null,
      decimals?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { key: string; val: BigNumber; decimals: BigNumber }
    >;

    log_named_decimal_uint(
      key?: null,
      val?: null,
      decimals?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { key: string; val: BigNumber; decimals: BigNumber }
    >;

    log_named_int(
      key?: null,
      val?: null
    ): TypedEventFilter<[string, BigNumber], { key: string; val: BigNumber }>;

    log_named_string(
      key?: null,
      val?: null
    ): TypedEventFilter<[string, string], { key: string; val: string }>;

    log_named_uint(
      key?: null,
      val?: null
    ): TypedEventFilter<[string, BigNumber], { key: string; val: BigNumber }>;

    logs(undefined?: null): TypedEventFilter<[string], { arg0: string }>;
  };

  estimateGas: {
    IS_TEST(overrides?: CallOverrides): Promise<BigNumber>;

    failed(overrides?: CallOverrides): Promise<BigNumber>;

    feed(overrides?: CallOverrides): Promise<BigNumber>;

    listLen(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "prepareDefaultNFT(uint256,uint256,uint256)"(
      tokenId: BigNumberish,
      nftValue: BigNumberish,
      risk: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "prepareDefaultNFT(uint256,uint256)"(
      tokenId: BigNumberish,
      nftValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    rdiv(
      x: BigNumberish,
      y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rmul(
      x: BigNumberish,
      y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    safeAdd(
      x: BigNumberish,
      y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    safeDiv(
      x: BigNumberish,
      y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    safeMul(
      x: BigNumberish,
      y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    safeSub(
      x: BigNumberish,
      y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setUp(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setupLinkedListBuckets(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    testBorrowWithFixedFee(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    testChangeMaturityDateNoDebt(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    testChangeMaturityDebtRepaid(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    testChangeRiskGroup(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    testFailChangeMaturityDateLoanOngoing(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    testLinkedListBucket(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    testNormalizeDate(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    testRecoveryRatePD(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    testRemoveBuckets(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    testRepay(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    testRepayAfterMaturityDate(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    testSimpleBorrow(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    testTimeOverBuckets(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    testWriteOffs(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    IS_TEST(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    failed(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    feed(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    listLen(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "prepareDefaultNFT(uint256,uint256,uint256)"(
      tokenId: BigNumberish,
      nftValue: BigNumberish,
      risk: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "prepareDefaultNFT(uint256,uint256)"(
      tokenId: BigNumberish,
      nftValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    rdiv(
      x: BigNumberish,
      y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rmul(
      x: BigNumberish,
      y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    safeAdd(
      x: BigNumberish,
      y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    safeDiv(
      x: BigNumberish,
      y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    safeMul(
      x: BigNumberish,
      y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    safeSub(
      x: BigNumberish,
      y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setUp(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setupLinkedListBuckets(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    testBorrowWithFixedFee(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    testChangeMaturityDateNoDebt(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    testChangeMaturityDebtRepaid(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    testChangeRiskGroup(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    testFailChangeMaturityDateLoanOngoing(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    testLinkedListBucket(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    testNormalizeDate(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    testRecoveryRatePD(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    testRemoveBuckets(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    testRepay(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    testRepayAfterMaturityDate(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    testSimpleBorrow(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    testTimeOverBuckets(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    testWriteOffs(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
